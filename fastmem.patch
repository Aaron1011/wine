From f5ff4767efe6c191602a61b3c4d853c41f2e5f80 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Thu, 9 Jul 2020 19:24:52 +0200
Subject: [PATCH 1/7] Optimize {read,write}_process_memory using
 process_vm_readv/writev.

---
 server/ptrace.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/server/ptrace.c b/server/ptrace.c
index 49347791d8..71d6f5c04b 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -341,6 +341,27 @@ static struct thread *get_ptrace_thread( struct process *process )
 }
 
 /* read data from a process memory space */
+#ifdef linux
+#include <sys/uio.h>
+
+int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
+{
+    struct iovec local_iov, remote_iov;
+
+    if ((size_t)size != size)
+    {
+        set_error( STATUS_ACCESS_DENIED );
+        return 0;
+    }
+
+    local_iov.iov_base  = (void*)dest;
+    local_iov.iov_len   = (size_t)size;
+    remote_iov.iov_base = (void*)ptr;
+    remote_iov.iov_len  = (size_t)size;
+
+    return process_vm_readv(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0) != -1;
+}
+#else
 int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 {
     struct thread *thread = get_ptrace_thread( process );
@@ -408,6 +429,7 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     }
     return !len;
 }
+#endif
 
 /* make sure we can write to the whole address range */
 /* len is the total size (in ints) */
@@ -426,6 +448,27 @@ static int check_process_write_access( struct thread *thread, long *addr, data_s
 }
 
 /* write data to a process memory space */
+#ifdef linux
+#include <sys/uio.h>
+
+int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
+{
+    struct iovec local_iov, remote_iov;
+
+    if ((size_t)size != size)
+    {
+        set_error( STATUS_ACCESS_DENIED );
+        return 0;
+    }
+
+    local_iov.iov_base  = (void*)src;
+    local_iov.iov_len   = (size_t)size;
+    remote_iov.iov_base = (void*)ptr;
+    remote_iov.iov_len  = (size_t)size;
+
+    return process_vm_writev(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0) != -1;
+}
+#else
 int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
 {
     struct thread *thread = get_ptrace_thread( process );
@@ -512,6 +555,7 @@ int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     }
     return ret;
 }
+#endif
 
 /* retrieve an LDT selector entry */
 void get_selector_entry( struct thread *thread, int entry, unsigned int *base,
-- 
2.27.0


From 50b7e5f7738710e9c12724918083a887917aa4fa Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Fri, 10 Jul 2020 23:53:41 +0200
Subject: [PATCH 2/7] Optimize {read,write}_process_memory using
 process_vm_readv/writev.

---
 server/ptrace.c | 63 +++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 53 insertions(+), 10 deletions(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index 71d6f5c04b..1ebe590f23 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -46,6 +46,9 @@
 #ifdef HAVE_SYS_THR_H
 # include <sys/thr.h>
 #endif
+#if defined(linux) && defined(HAVE_SYS_UIO_H)
+#include <sys/uio.h>
+#endif
 #include <unistd.h>
 
 #include "ntstatus.h"
@@ -341,12 +344,24 @@ static struct thread *get_ptrace_thread( struct process *process )
 }
 
 /* read data from a process memory space */
-#ifdef linux
-#include <sys/uio.h>
-
+#if defined(linux) && defined(HAVE_SYS_UIO_H)
+int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest );
 int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 {
+    static int have_process_vm_readv = -1;
     struct iovec local_iov, remote_iov;
+    int bytes_read;
+
+    if (have_process_vm_readv == 0)
+        return read_process_memory_ptrace( process, ptr, size, dest );
+        
+    if (!get_ptrace_thread( process )) return 0;
+
+    if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
+    {
+        set_error( STATUS_ACCESS_DENIED );
+        return 0;
+    }
 
     if ((size_t)size != size)
     {
@@ -359,10 +374,19 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     remote_iov.iov_base = (void*)ptr;
     remote_iov.iov_len  = (size_t)size;
 
-    return process_vm_readv(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0) != -1;
+    errno = 0;
+    bytes_read = process_vm_readv(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0);
+    if (errno == ENOSYS)
+    {
+        have_process_vm_readv = 0;
+        return read_process_memory_ptrace( process, ptr, size, dest );
+    }
+    return bytes_read != -1;
 }
+int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 #else
 int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
+#endif
 {
     struct thread *thread = get_ptrace_thread( process );
     unsigned int first_offset, last_offset, len;
@@ -429,7 +453,6 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     }
     return !len;
 }
-#endif
 
 /* make sure we can write to the whole address range */
 /* len is the total size (in ints) */
@@ -448,12 +471,24 @@ static int check_process_write_access( struct thread *thread, long *addr, data_s
 }
 
 /* write data to a process memory space */
-#ifdef linux
-#include <sys/uio.h>
-
+#if defined(linux) && defined(HAVE_SYS_UIO_H)
+int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src );
 int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
 {
+    static int have_process_vm_writev = -1;
     struct iovec local_iov, remote_iov;
+    int bytes_written;
+
+    if (have_process_vm_writev == 0)
+        return write_process_memory_ptrace( process, ptr, size, src );
+        
+    if (!get_ptrace_thread( process )) return 0;
+
+    if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
+    {
+        set_error( STATUS_ACCESS_DENIED );
+        return 0;
+    }
 
     if ((size_t)size != size)
     {
@@ -466,10 +501,19 @@ int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     remote_iov.iov_base = (void*)ptr;
     remote_iov.iov_len  = (size_t)size;
 
-    return process_vm_writev(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0) != -1;
+    errno = 0;
+    bytes_written = process_vm_writev(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0);
+    if (errno == ENOSYS)
+    {
+        have_process_vm_writev = 0;
+        return write_process_memory_ptrace( process, ptr, size, src );
+    }
+    return bytes_written != -1;
 }
+int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
 #else
 int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
+#endif
 {
     struct thread *thread = get_ptrace_thread( process );
     int ret = 0;
@@ -555,7 +599,6 @@ int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t
     }
     return ret;
 }
-#endif
 
 /* retrieve an LDT selector entry */
 void get_selector_entry( struct thread *thread, int entry, unsigned int *base,
-- 
2.27.0


From fc939ca2261067767fb863971dcb17c4a5445871 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Fri, 10 Jul 2020 23:55:44 +0200
Subject: [PATCH 3/7] Optimize {read,write}_process_memory using
 process_vm_readv/writev.

---
 server/ptrace.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index 1ebe590f23..7e36e63d37 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -46,7 +46,7 @@
 #ifdef HAVE_SYS_THR_H
 # include <sys/thr.h>
 #endif
-#if defined(linux) && defined(HAVE_SYS_UIO_H)
+#ifdef HAVE_SYS_UIO_H
 #include <sys/uio.h>
 #endif
 #include <unistd.h>
@@ -344,7 +344,7 @@ static struct thread *get_ptrace_thread( struct process *process )
 }
 
 /* read data from a process memory space */
-#if defined(linux) && defined(HAVE_SYS_UIO_H)
+#ifdef HAVE_SYS_UIO_H
 int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest );
 int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 {
@@ -354,7 +354,7 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
 
     if (have_process_vm_readv == 0)
         return read_process_memory_ptrace( process, ptr, size, dest );
-        
+
     if (!get_ptrace_thread( process )) return 0;
 
     if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
@@ -471,7 +471,7 @@ static int check_process_write_access( struct thread *thread, long *addr, data_s
 }
 
 /* write data to a process memory space */
-#if defined(linux) && defined(HAVE_SYS_UIO_H)
+#ifdef HAVE_SYS_UIO_H
 int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src );
 int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
 {
@@ -481,7 +481,7 @@ int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t
 
     if (have_process_vm_writev == 0)
         return write_process_memory_ptrace( process, ptr, size, src );
-        
+
     if (!get_ptrace_thread( process )) return 0;
 
     if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
-- 
2.27.0


From 713b01e5581fcf4765ff874a334f2925720ca616 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Fri, 10 Jul 2020 23:59:13 +0200
Subject: [PATCH 4/7] Optimize {read,write}_process_memory using
 process_vm_readv/writev.

Changes made by Richard Yao.
---
 server/ptrace.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index 7e36e63d37..c0d0749c6e 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -381,7 +381,10 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
         have_process_vm_readv = 0;
         return read_process_memory_ptrace( process, ptr, size, dest );
     }
-    return bytes_read != -1;
+    if (bytes_read !=size)
+        return read_process_memory_ptrace( process, ptr, size, dest );
+
+    return bytes_read == size;
 }
 int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 #else
@@ -508,7 +511,10 @@ int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t
         have_process_vm_writev = 0;
         return write_process_memory_ptrace( process, ptr, size, src );
     }
-    return bytes_written != -1;
+    if (bytes_written !=size)
+        return write_process_memory_ptrace( process, ptr, size, src );
+
+    return bytes_written == size;
 }
 int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
 #else
-- 
2.27.0


From 35493897f71b1939733b7cd4dba7d4c881b7fdf2 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 11 Jul 2020 00:00:58 +0200
Subject: [PATCH 5/7] Optimize read_process_memory using process_vm_readv.

---
 server/ptrace.c | 173 +++++++++++-------------------------------------
 1 file changed, 40 insertions(+), 133 deletions(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index c0d0749c6e..ac15412b9c 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -344,117 +344,69 @@ static struct thread *get_ptrace_thread( struct process *process )
 }
 
 /* read data from a process memory space */
-#ifdef HAVE_SYS_UIO_H
-int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest );
 int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
 {
     static int have_process_vm_readv = -1;
-    struct iovec local_iov, remote_iov;
-    int bytes_read;
-
-    if (have_process_vm_readv == 0)
-        return read_process_memory_ptrace( process, ptr, size, dest );
+    int page_size = get_page_size();
+    char procmem[24];
+    int fd;
+    ssize_t ret;
 
     if (!get_ptrace_thread( process )) return 0;
 
-    if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
+    if ((unsigned long)ptr != ptr) /* Still no idea what this is for. */
     {
         set_error( STATUS_ACCESS_DENIED );
         return 0;
     }
 
-    if ((size_t)size != size)
+#ifdef HAVE_SYS_UIO_H
+    /* Use process_vm_readv if the memory region does not cross a page boundary. */
+    if (have_process_vm_readv && ((size_t)ptr & (page_size - 1)) + size < page_size)
     {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
+        struct iovec local_iov, remote_iov;
 
-    local_iov.iov_base  = (void*)dest;
-    local_iov.iov_len   = (size_t)size;
-    remote_iov.iov_base = (void*)ptr;
-    remote_iov.iov_len  = (size_t)size;
+        if ((size_t)size != size)
+        {
+            set_error( STATUS_ACCESS_DENIED );
+            return 0;
+        }
 
-    errno = 0;
-    bytes_read = process_vm_readv(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0);
-    if (errno == ENOSYS)
-    {
-        have_process_vm_readv = 0;
-        return read_process_memory_ptrace( process, ptr, size, dest );
-    }
-    if (bytes_read !=size)
-        return read_process_memory_ptrace( process, ptr, size, dest );
+        local_iov.iov_base  = (void*)dest;
+        local_iov.iov_len   = (size_t)size;
+        remote_iov.iov_base = (void*)ptr;
+        remote_iov.iov_len  = (size_t)size;
 
-    return bytes_read == size;
-}
-int read_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
-#else
-int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, char *dest )
-#endif
-{
-    struct thread *thread = get_ptrace_thread( process );
-    unsigned int first_offset, last_offset, len;
-    unsigned long data, *addr;
+        errno = 0;
+        ret = process_vm_readv( process->unix_pid, &local_iov, 1, &remote_iov, 1, 0 );
+        if (errno == ENOSYS)
+        {
+            have_process_vm_readv = 0;
+            goto do_pread;
+        }
 
-    if (!thread) return 0;
+        if (ret == -1) /* An error occurred. */
+            return 0;
+        if ((data_size_t)ret > 0) /* Data was sucessfully read. */
+            return 1;
+        /* No data was read, try again with pread. */
+    }
+do_pread:
+#endif
 
-    if ((unsigned long)ptr != ptr)
+    if ((size_t)size != size || size == (data_size_t)-1 || (off_t)ptr != ptr)
     {
         set_error( STATUS_ACCESS_DENIED );
         return 0;
     }
 
-    first_offset = ptr % sizeof(long);
-    last_offset = (size + first_offset) % sizeof(long);
-    if (!last_offset) last_offset = sizeof(long);
-
-    addr = (unsigned long *)(unsigned long)(ptr - first_offset);
-    len = (size + first_offset + sizeof(long) - 1) / sizeof(long);
-
-    if (suspend_for_ptrace( thread ))
-    {
-        if (len > 3)  /* /proc/pid/mem should be faster for large sizes */
-        {
-            char procmem[24];
-            int fd;
-
-            sprintf( procmem, "/proc/%u/mem", process->unix_pid );
-            if ((fd = open( procmem, O_RDONLY )) != -1)
-            {
-                ssize_t ret = pread( fd, dest, size, ptr );
-                close( fd );
-                if (ret == size)
-                {
-                    len = 0;
-                    goto done;
-                }
-            }
-        }
-
-        if (len > 1)
-        {
-            if (read_thread_long( thread, addr++, &data ) == -1) goto done;
-            memcpy( dest, (char *)&data + first_offset, sizeof(long) - first_offset );
-            dest += sizeof(long) - first_offset;
-            first_offset = 0;
-            len--;
-        }
-
-        while (len > 1)
-        {
-            if (read_thread_long( thread, addr++, &data ) == -1) goto done;
-            memcpy( dest, &data, sizeof(long) );
-            dest += sizeof(long);
-            len--;
-        }
-
-        if (read_thread_long( thread, addr++, &data ) == -1) goto done;
-        memcpy( dest, (char *)&data + first_offset, last_offset - first_offset );
-        len--;
+    sprintf( procmem, "/proc/%lu/mem", (unsigned long)process->unix_pid );
+    if ((fd = open( procmem, O_RDONLY )) == -1)
+        return 0;
+    ret = pread( fd, dest, size, ptr );
+    close( fd );
 
-    done:
-        resume_after_ptrace( thread );
-    }
-    return !len;
+    return ret != -1 && (data_size_t)ret == size;
 }
 
 /* make sure we can write to the whole address range */
@@ -474,52 +426,7 @@ static int check_process_write_access( struct thread *thread, long *addr, data_s
 }
 
 /* write data to a process memory space */
-#ifdef HAVE_SYS_UIO_H
-int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src );
-int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
-{
-    static int have_process_vm_writev = -1;
-    struct iovec local_iov, remote_iov;
-    int bytes_written;
-
-    if (have_process_vm_writev == 0)
-        return write_process_memory_ptrace( process, ptr, size, src );
-
-    if (!get_ptrace_thread( process )) return 0;
-
-    if ((unsigned long)ptr != ptr) /* Not sure what this is for? */
-    {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
-
-    if ((size_t)size != size)
-    {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
-
-    local_iov.iov_base  = (void*)src;
-    local_iov.iov_len   = (size_t)size;
-    remote_iov.iov_base = (void*)ptr;
-    remote_iov.iov_len  = (size_t)size;
-
-    errno = 0;
-    bytes_written = process_vm_writev(process->unix_pid, &local_iov, 1, &remote_iov, 1, 0);
-    if (errno == ENOSYS)
-    {
-        have_process_vm_writev = 0;
-        return write_process_memory_ptrace( process, ptr, size, src );
-    }
-    if (bytes_written !=size)
-        return write_process_memory_ptrace( process, ptr, size, src );
-
-    return bytes_written == size;
-}
-int write_process_memory_ptrace( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
-#else
 int write_process_memory( struct process *process, client_ptr_t ptr, data_size_t size, const char *src )
-#endif
 {
     struct thread *thread = get_ptrace_thread( process );
     int ret = 0;
-- 
2.27.0


From fec612a5a4bcc1329a2912c54f5fe7e1591bc526 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 11 Jul 2020 00:02:04 +0200
Subject: [PATCH 6/7] Optimize read_process_memory using process_vm_readv.

---
 server/ptrace.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index ac15412b9c..bc8efb6709 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -406,7 +406,7 @@ do_pread:
     ret = pread( fd, dest, size, ptr );
     close( fd );
 
-    return ret != -1 && (data_size_t)ret == size;
+    return ret != -1 && (data_size_t)ret > size;
 }
 
 /* make sure we can write to the whole address range */
-- 
2.27.0


From d4c4cb4705ecd71a4265a750fcc57dfe81370e99 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 11 Jul 2020 00:36:26 +0200
Subject: [PATCH 7/7] Optimize read_process_memory using process_vm_readv.

---
 server/ptrace.c | 60 ++++++++++++++++++++++++++++++++++---------------
 1 file changed, 42 insertions(+), 18 deletions(-)

diff --git a/server/ptrace.c b/server/ptrace.c
index bc8efb6709..debfb6997c 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -372,24 +372,33 @@ int read_process_memory( struct process *process, client_ptr_t ptr, data_size_t
             return 0;
         }
 
-        local_iov.iov_base  = (void*)dest;
-        local_iov.iov_len   = (size_t)size;
-        remote_iov.iov_base = (void*)ptr;
-        remote_iov.iov_len  = (size_t)size;
+        do {
+            local_iov.iov_base  = (void*)dest;
+            local_iov.iov_len   = (size_t)size;
+            remote_iov.iov_base = (void*)ptr;
+            remote_iov.iov_len  = (size_t)size;
+
+            errno = 0;
+            ret = process_vm_readv( process->unix_pid, &local_iov, 1, &remote_iov, 1, 0 );
+            if (errno == ENOSYS)
+            {
+                have_process_vm_readv = 0;
+                goto do_pread;
+            }
 
-        errno = 0;
-        ret = process_vm_readv( process->unix_pid, &local_iov, 1, &remote_iov, 1, 0 );
-        if (errno == ENOSYS)
-        {
-            have_process_vm_readv = 0;
-            goto do_pread;
-        }
+            if (ret == -1) /* An error occurred. */
+                return 0;
+            if (ret == 0 && size != 0) /* No data could be read, try pread instead. */
+                goto do_pread;
 
-        if (ret == -1) /* An error occurred. */
-            return 0;
-        if ((data_size_t)ret > 0) /* Data was sucessfully read. */
-            return 1;
-        /* No data was read, try again with pread. */
+            /* Try reading the next part. */
+            if ((size_t)ret > size) ret = (ssize_t)size;
+            ptr += ret;
+            dest += ret;
+            size -= ret;
+        } while (size > 0);
+
+        return 1;
     }
 do_pread:
 #endif
@@ -403,10 +412,25 @@ do_pread:
     sprintf( procmem, "/proc/%lu/mem", (unsigned long)process->unix_pid );
     if ((fd = open( procmem, O_RDONLY )) == -1)
         return 0;
-    ret = pread( fd, dest, size, ptr );
+
+    do {
+        ret = pread( fd, dest, size, ptr );
+
+        if (ret == -1) /* An error occurred. */
+            return 0;
+        if (ret == 0 && size != 0) /* No data could be read. */
+            return 0;
+
+        /* Try reading the next part. */
+        if ((size_t)ret > size) ret = (ssize_t)size;
+        ptr += ret;
+        dest += ret;
+        size -= ret;
+    } while (size > 0);
+
     close( fd );
 
-    return ret != -1 && (data_size_t)ret > size;
+    return 1;
 }
 
 /* make sure we can write to the whole address range */
-- 
2.27.0

