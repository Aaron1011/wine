From b634fa7ca7eb428252cbaf539dca5a2be3ef9e0c Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:53 +0200
Subject: [PATCH 10/10] msvcrt: Import lgammaf implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |   1 -
 configure.ac          |   1 -
 dlls/msvcrt/math.c    | 259 ++++++++++++++++++++++++++++++++++++------
 dlls/msvcrt/unixlib.c |  14 ---
 dlls/msvcrt/unixlib.h |   1 -
 include/config.h.in   |   3 -
 6 files changed, 226 insertions(+), 53 deletions(-)

diff --git a/configure.ac b/configure.ac
index f5bf9bc071f..afb4dc7432a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2659,7 +2659,6 @@ AC_CHECK_FUNCS(\
 	exp2 \
 	exp2f \
 	fmaf \
-	lgammaf \
 	tgamma \
 	tgammaf
 )
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 6f0b0c1ba4f..3d8a63a8444 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -636,6 +636,38 @@ static float __expm1f(float x)
         y = (x - (e + u.f) + 1) * twopk;
     return y;
 }
+
+/* Copied from musl: src/math/__sindf.c */
+static float __sindf(double x)
+{
+    static const double S1 = -0x15555554cbac77.0p-55,
+        S2 = 0x111110896efbb2.0p-59,
+        S3 = -0x1a00f9e2cae774.0p-65,
+        S4 = 0x16cd878c3b46a7.0p-71;
+
+    double r, s, w, z;
+
+    z = x * x;
+    w = z * z;
+    r = S3 + z * S4;
+    s = z * x;
+    return (x + s * (S1 + z * S2)) + s * w * r;
+}
+
+/* Copied from musl: src/math/__cosdf.c */
+static float __cosdf(double x)
+{
+    static const double C0 = -0x1ffffffd0c5e81.0p-54,
+        C1 = 0x155553e1053a42.0p-57,
+        C2 = -0x16c087e80f1e27.0p-62,
+        C3 = 0x199342e0ee5069.0p-68;
+    double r, w, z;
+
+    z = x * x;
+    w = z * z;
+    r = C2 + z * C3;
+    return ((1.0 + z * C0) + w * C1) + (w * z) * r;
+}
 #endif
 
 #ifndef __i386__
@@ -987,38 +1019,6 @@ static int __rem_pio2f(float x, double *y)
     return n;
 }
 
-/* Copied from musl: src/math/__sindf.c */
-static float __sindf(double x)
-{
-    static const double S1 = -0x15555554cbac77.0p-55,
-        S2 = 0x111110896efbb2.0p-59,
-        S3 = -0x1a00f9e2cae774.0p-65,
-        S4 = 0x16cd878c3b46a7.0p-71;
-
-    double r, s, w, z;
-
-    z = x * x;
-    w = z * z;
-    r = S3 + z * S4;
-    s = z * x;
-    return (x + s * (S1 + z * S2)) + s * w * r;
-}
-
-/* Copied from musl: src/math/__cosdf.c */
-static float __cosdf(double x)
-{
-    static const double C0 = -0x1ffffffd0c5e81.0p-54,
-        C1 = 0x155553e1053a42.0p-57,
-        C2 = -0x16c087e80f1e27.0p-62,
-        C3 = 0x199342e0ee5069.0p-68;
-    double r, w, z;
-
-    z = x * x;
-    w = z * z;
-    r = C2 + z * C3;
-    return ((1.0 + z * C0) + w * C1) + (w * z) * r;
-}
-
 /*********************************************************************
  *      cosf (MSVCRT.@)
  *
@@ -8846,12 +8846,205 @@ double CDECL lgamma(double x)
     return r;
 }
 
+/* sin(pi*x) assuming x > 2^-100, if sin(pi*x)==0 the sign is arbitrary */
+static float sinf_pi(float x)
+{
+    double y;
+    int n;
+
+    /* spurious inexact if odd int */
+    x = 2 * (x * 0.5f - floorf(x * 0.5f)); /* x mod 2.0 */
+
+    n = (int)(x * 4);
+    n = (n + 1) / 2;
+    y = x - n * 0.5f;
+    y *= M_PI;
+    switch (n) {
+    default: /* case 4: */
+    case 0: return __sindf(y);
+    case 1: return __cosdf(y);
+    case 2: return __sindf(-y);
+    case 3: return -__cosdf(y);
+    }
+}
+
 /*********************************************************************
  *      lgammaf (MSVCR120.@)
+ *
+ * Copied from musl: src/math/lgammaf_r.c
  */
 float CDECL lgammaf(float x)
 {
-    return unix_funcs->lgammaf( x );
+    static const float pi = 3.1415927410e+00,
+        a0 = 7.7215664089e-02,
+        a1 = 3.2246702909e-01,
+        a2 = 6.7352302372e-02,
+        a3 = 2.0580807701e-02,
+        a4 = 7.3855509982e-03,
+        a5 = 2.8905137442e-03,
+        a6 = 1.1927076848e-03,
+        a7 = 5.1006977446e-04,
+        a8 = 2.2086278477e-04,
+        a9 = 1.0801156895e-04,
+        a10 = 2.5214456400e-05,
+        a11 = 4.4864096708e-05,
+        tc = 1.4616321325e+00,
+        tf = -1.2148628384e-01,
+        tt = 6.6971006518e-09,
+        t0 = 4.8383611441e-01,
+        t1 = -1.4758771658e-01,
+        t2 = 6.4624942839e-02,
+        t3 = -3.2788541168e-02,
+        t4 = 1.7970675603e-02,
+        t5 = -1.0314224288e-02,
+        t6 = 6.1005386524e-03,
+        t7 = -3.6845202558e-03,
+        t8 = 2.2596477065e-03,
+        t9 = -1.4034647029e-03,
+        t10 = 8.8108185446e-04,
+        t11 = -5.3859531181e-04,
+        t12 = 3.1563205994e-04,
+        t13 = -3.1275415677e-04,
+        t14 = 3.3552918467e-04,
+        u0 = -7.7215664089e-02,
+        u1 = 6.3282704353e-01,
+        u2 = 1.4549225569e+00,
+        u3 = 9.7771751881e-01,
+        u4 = 2.2896373272e-01,
+        u5 = 1.3381091878e-02,
+        v1 = 2.4559779167e+00,
+        v2 = 2.1284897327e+00,
+        v3 = 7.6928514242e-01,
+        v4 = 1.0422264785e-01,
+        v5 = 3.2170924824e-03,
+        s0 = -7.7215664089e-02,
+        s1 = 2.1498242021e-01,
+        s2 = 3.2577878237e-01,
+        s3 = 1.4635047317e-01,
+        s4 = 2.6642270386e-02,
+        s5 = 1.8402845599e-03,
+        s6 = 3.1947532989e-05,
+        r1 = 1.3920053244e+00,
+        r2 = 7.2193557024e-01,
+        r3 = 1.7193385959e-01,
+        r4 = 1.8645919859e-02,
+        r5 = 7.7794247773e-04,
+        r6 = 7.3266842264e-06,
+        w0 = 4.1893854737e-01,
+        w1 = 8.3333335817e-02,
+        w2 = -2.7777778450e-03,
+        w3 = 7.9365057172e-04,
+        w4 = -5.9518753551e-04,
+        w5 = 8.3633989561e-04,
+        w6 = -1.6309292987e-03;
+
+    union {float f; UINT32 i;} u = {x};
+    float t, y, z, nadj, p, p1, p2, p3, q, r, w;
+    UINT32 ix;
+    int i, sign;
+
+    /* purge off +-inf, NaN, +-0, tiny and negative arguments */
+    sign = u.i >> 31;
+    ix = u.i & 0x7fffffff;
+    if (ix >= 0x7f800000)
+        return x * x;
+    if (ix < 0x35000000) { /* |x| < 2**-21, return -log(|x|) */
+        if (sign)
+            x = -x;
+        return -logf(x);
+    }
+    if (sign) {
+        x = -x;
+        t = sinf_pi(x);
+        if (t == 0.0f) { /* -integer */
+            *_errno() = ERANGE;
+            return 1.0f / (x - x);
+        }
+        if (t <= 0.0f)
+            t = -t;
+        nadj = logf(pi / (t * x));
+    }
+
+    /* purge off 1 and 2 */
+    if (ix == 0x3f800000 || ix == 0x40000000)
+        r = 0;
+    /* for x < 2.0 */
+    else if (ix < 0x40000000) {
+        if (ix <= 0x3f666666) { /* lgamma(x) = lgamma(x+1)-log(x) */
+            r = -logf(x);
+            if (ix >= 0x3f3b4a20) {
+                y = 1.0f - x;
+                i = 0;
+            } else if (ix >= 0x3e6d3308) {
+                y = x - (tc - 1.0f);
+                i = 1;
+            } else {
+                y = x;
+                i = 2;
+            }
+        } else {
+            r = 0.0f;
+            if (ix >= 0x3fdda618) { /* [1.7316,2] */
+                y = 2.0f - x;
+                i = 0;
+            } else if (ix >= 0x3F9da620) { /* [1.23,1.73] */
+                y = x - tc;
+                i = 1;
+            } else {
+                y = x - 1.0f;
+                i = 2;
+            }
+        }
+        switch(i) {
+        case 0:
+            z = y * y;
+            p1 = a0 + z * (a2 + z * (a4 + z * (a6 + z * (a8 + z * a10))));
+            p2 = z * (a1 + z * (a3 + z * (a5 + z * (a7 + z * (a9 + z * a11)))));
+            p = y * p1 + p2;
+            r += p - 0.5f * y;
+            break;
+        case 1:
+            z = y * y;
+            w = z * y;
+            p1 = t0 + w * (t3 + w * (t6 + w * (t9 + w * t12))); /* parallel comp */
+            p2 = t1 + w * (t4 + w * (t7 + w * (t10 + w * t13)));
+            p3 = t2 + w * (t5 + w * (t8 + w * (t11 + w * t14)));
+            p = z * p1 - (tt - w * (p2 + y * p3));
+            r += (tf + p);
+            break;
+        case 2:
+            p1 = y * (u0 + y * (u1 + y * (u2 + y * (u3 + y * (u4 + y * u5)))));
+            p2 = 1.0f + y * (v1 + y * (v2 + y * (v3 + y * (v4 + y * v5))));
+            r += -0.5f * y + p1 / p2;
+        }
+    } else if (ix < 0x41000000) { /* x < 8.0 */
+        i = (int)x;
+        y = x - (float)i;
+        p = y * (s0 + y * (s1 + y * (s2 + y * (s3 + y * (s4 + y * (s5 + y * s6))))));
+        q = 1.0f + y * (r1 + y * (r2 + y * (r3 + y * (r4 + y * (r5 + y * r6)))));
+        r = 0.5f * y + p / q;
+        z = 1.0f; /* lgamma(1+s) = log(s) + lgamma(s) */
+        switch (i) {
+        case 7: z *= y + 6.0f; /* fall through */
+        case 6: z *= y + 5.0f; /* fall through */
+        case 5: z *= y + 4.0f; /* fall through */
+        case 4: z *= y + 3.0f; /* fall through */
+        case 3:
+            z *= y + 2.0f;
+            r += logf(z);
+            break;
+        }
+    } else if (ix < 0x5c800000) { /* 8.0 <= x < 2**58 */
+        t = logf(x);
+        z = 1.0f / x;
+        y = z * z;
+        w = w0 + z * (w1 + y * (w2 + y * (w3 + y * (w4 + y * (w5 + y * w6)))));
+        r = (x - 0.5f) * (t - 1.0f) + w;
+    } else /* 2**58 <= x <= inf */
+        r = x * (logf(x) - 1.0f);
+    if (sign)
+        r = nadj - r;
+    return r;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 14aeef4c1e7..012ec6f6b85 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -94,19 +94,6 @@ static float CDECL unix_fmaf( float x, float y, float z )
 #endif
 }
 
-/*********************************************************************
- *      lgammaf
- */
-static float CDECL unix_lgammaf(float x)
-{
-#ifdef HAVE_LGAMMAF
-    return lgammaf(x);
-#else
-    FIXME( "not implemented\n" );
-    return 0;
-#endif
-}
-
 /*********************************************************************
  *      pow
  */
@@ -156,7 +143,6 @@ static const struct unix_funcs funcs =
     unix_exp2,
     unix_exp2f,
     unix_fmaf,
-    unix_lgammaf,
     unix_pow,
     unix_powf,
     unix_tgamma,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 4309ff835a0..a9c569d6f63 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -28,7 +28,6 @@ struct unix_funcs
     double          (CDECL *exp2)(double x);
     float           (CDECL *exp2f)(float x);
     float           (CDECL *fmaf)(float x, float y, float z);
-    float           (CDECL *lgammaf)(float x);
     double          (CDECL *pow)(double x, double y);
     float           (CDECL *powf)(float x, float y);
     double          (CDECL *tgamma)(double x);
diff --git a/include/config.h.in b/include/config.h.in
index dd34230b268..537dda5f68d 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -297,9 +297,6 @@
 /* Define to 1 if you have the `ldap_parse_vlv_control' function. */
 #undef HAVE_LDAP_PARSE_VLV_CONTROL
 
-/* Define to 1 if you have the `lgammaf' function. */
-#undef HAVE_LGAMMAF
-
 /* Define to 1 if you have the `gettextpo' library (-lgettextpo). */
 #undef HAVE_LIBGETTEXTPO
 
-- 
2.31.1

From 3171aa2b2d8db28e5bfde1cad92e0ef36ee7ccaa Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:49 +0200
Subject: [PATCH 09/10] msvcrt: Import lgamma implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |   1 -
 configure.ac          |   1 -
 dlls/msvcrt/math.c    | 196 +++++++++++++++++++++++++++++++++++++++++-
 dlls/msvcrt/unixlib.c |  14 ---
 dlls/msvcrt/unixlib.h |   1 -
 include/config.h.in   |   3 -
 6 files changed, 195 insertions(+), 21 deletions(-)

diff --git a/configure.ac b/configure.ac
index cb2b0cbeb17..f5bf9bc071f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2659,7 +2659,6 @@ AC_CHECK_FUNCS(\
 	exp2 \
 	exp2f \
 	fmaf \
-	lgamma \
 	lgammaf \
 	tgamma \
 	tgammaf
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index ae9debce20c..6f0b0c1ba4f 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -8644,12 +8644,206 @@ end:
     return sx ? -x : x;
 }
 
+/* sin(pi*x) assuming x > 2^-100, if sin(pi*x)==0 the sign is arbitrary */
+static double sin_pi(double x)
+{
+    static const double pi = 3.14159265358979311600e+00;
+    int n;
+
+    /* spurious inexact if odd int */
+    x = 2.0 * (x * 0.5 - floor(x * 0.5)); /* x mod 2.0 */
+
+    n = (int)(x * 4.0);
+    n = (n + 1) / 2;
+    x -= n * 0.5f;
+    x *= pi;
+
+    switch (n) {
+    default: /* case 4: */
+    case 0: return __sin(x, 0.0, 0);
+    case 1: return __cos(x, 0.0);
+    case 2: return __sin(-x, 0.0, 0);
+    case 3: return -__cos(x, 0.0);
+    }
+}
+
 /*********************************************************************
  *      lgamma (MSVCR120.@)
+ *
+ * Copied from musl: src/math/lgamma_r.c
  */
 double CDECL lgamma(double x)
 {
-    return unix_funcs->lgamma( x );
+    static const double pi = 3.14159265358979311600e+00,
+        a0 = 7.72156649015328655494e-02,
+        a1 = 3.22467033424113591611e-01,
+        a2 = 6.73523010531292681824e-02,
+        a3 = 2.05808084325167332806e-02,
+        a4 = 7.38555086081402883957e-03,
+        a5 = 2.89051383673415629091e-03,
+        a6 = 1.19270763183362067845e-03,
+        a7 = 5.10069792153511336608e-04,
+        a8 = 2.20862790713908385557e-04,
+        a9 = 1.08011567247583939954e-04,
+        a10 = 2.52144565451257326939e-05,
+        a11 = 4.48640949618915160150e-05,
+        tc = 1.46163214496836224576e+00,
+        tf = -1.21486290535849611461e-01,
+        tt = -3.63867699703950536541e-18,
+        t0 = 4.83836122723810047042e-01,
+        t1 = -1.47587722994593911752e-01,
+        t2 = 6.46249402391333854778e-02,
+        t3 = -3.27885410759859649565e-02,
+        t4 = 1.79706750811820387126e-02,
+        t5 = -1.03142241298341437450e-02,
+        t6 = 6.10053870246291332635e-03,
+        t7 = -3.68452016781138256760e-03,
+        t8 = 2.25964780900612472250e-03,
+        t9 = -1.40346469989232843813e-03,
+        t10 = 8.81081882437654011382e-04,
+        t11 = -5.38595305356740546715e-04,
+        t12 = 3.15632070903625950361e-04,
+        t13 = -3.12754168375120860518e-04,
+        t14 = 3.35529192635519073543e-04,
+        u0 = -7.72156649015328655494e-02,
+        u1 = 6.32827064025093366517e-01,
+        u2 = 1.45492250137234768737e+00,
+        u3 = 9.77717527963372745603e-01,
+        u4 = 2.28963728064692451092e-01,
+        u5 = 1.33810918536787660377e-02,
+        v1 = 2.45597793713041134822e+00,
+        v2 = 2.12848976379893395361e+00,
+        v3 = 7.69285150456672783825e-01,
+        v4 = 1.04222645593369134254e-01,
+        v5 = 3.21709242282423911810e-03,
+        s0 = -7.72156649015328655494e-02,
+        s1 = 2.14982415960608852501e-01,
+        s2 = 3.25778796408930981787e-01,
+        s3 = 1.46350472652464452805e-01,
+        s4 = 2.66422703033638609560e-02,
+        s5 = 1.84028451407337715652e-03,
+        s6 = 3.19475326584100867617e-05,
+        r1 = 1.39200533467621045958e+00,
+        r2 = 7.21935547567138069525e-01,
+        r3 = 1.71933865632803078993e-01,
+        r4 = 1.86459191715652901344e-02,
+        r5 = 7.77942496381893596434e-04,
+        r6 = 7.32668430744625636189e-06,
+        w0 = 4.18938533204672725052e-01,
+        w1 = 8.33333333333329678849e-02,
+        w2 = -2.77777777728775536470e-03,
+        w3 = 7.93650558643019558500e-04,
+        w4 = -5.95187557450339963135e-04,
+        w5 = 8.36339918996282139126e-04,
+        w6 = -1.63092934096575273989e-03;
+
+    union {double f; UINT64 i;} u = {x};
+    double t, y, z, nadj, p, p1, p2, p3, q, r, w;
+    UINT32 ix;
+    int sign,i;
+
+    /* purge off +-inf, NaN, +-0, tiny and negative arguments */
+    sign = u.i >> 63;
+    ix = u.i >> 32 & 0x7fffffff;
+    if (ix >= 0x7ff00000)
+        return x * x;
+    if (ix < (0x3ff - 70) << 20) { /* |x|<2**-70, return -log(|x|) */
+        if(sign)
+            x = -x;
+        return -log(x);
+    }
+    if (sign) {
+        x = -x;
+        t = sin_pi(x);
+        if (t == 0.0) { /* -integer */
+            *_errno() = ERANGE;
+            return 1.0 / (x - x);
+        }
+        if (t <= 0.0)
+            t = -t;
+        nadj = log(pi / (t * x));
+    }
+
+    /* purge off 1 and 2 */
+    if ((ix == 0x3ff00000 || ix == 0x40000000) && (UINT32)u.i == 0)
+        r = 0;
+    /* for x < 2.0 */
+    else if (ix < 0x40000000) {
+        if (ix <= 0x3feccccc) { /* lgamma(x) = lgamma(x+1)-log(x) */
+            r = -log(x);
+            if (ix >= 0x3FE76944) {
+                y = 1.0 - x;
+                i = 0;
+            } else if (ix >= 0x3FCDA661) {
+                y = x - (tc - 1.0);
+                i = 1;
+            } else {
+                y = x;
+                i = 2;
+            }
+        } else {
+            r = 0.0;
+            if (ix >= 0x3FFBB4C3) { /* [1.7316,2] */
+                y = 2.0 - x;
+                i = 0;
+            } else if(ix >= 0x3FF3B4C4) { /* [1.23,1.73] */
+                y = x - tc;
+                i = 1;
+            } else {
+                y = x - 1.0;
+                i = 2;
+            }
+        }
+        switch (i) {
+        case 0:
+            z = y * y;
+            p1 = a0 + z * (a2 + z * (a4 + z * (a6 + z * (a8 + z * a10))));
+            p2 = z * (a1 + z * (a3 + z * (a5 + z * (a7 + z * (a9 + z * a11)))));
+            p = y * p1 + p2;
+            r += (p - 0.5 * y);
+            break;
+        case 1:
+            z = y * y;
+            w = z * y;
+            p1 = t0 + w * (t3 + w * (t6 + w * (t9 + w * t12))); /* parallel comp */
+            p2 = t1 + w * (t4 + w * (t7 + w * (t10 + w * t13)));
+            p3 = t2 + w * (t5 + w * (t8 + w * (t11 + w * t14)));
+            p = z * p1 - (tt - w * (p2 + y * p3));
+            r += tf + p;
+            break;
+        case 2:
+            p1 = y * (u0 + y * (u1 + y * (u2 + y * (u3 + y * (u4 + y * u5)))));
+            p2 = 1.0 + y * (v1 + y * (v2 + y * (v3 + y * (v4 + y * v5))));
+            r += -0.5 * y + p1 / p2;
+        }
+    } else if (ix < 0x40200000) { /* x < 8.0 */
+        i = (int)x;
+        y = x - (double)i;
+        p = y * (s0 + y * (s1 + y * (s2 + y * (s3 + y * (s4 + y * (s5 + y * s6))))));
+        q = 1.0 + y * (r1 + y * (r2 + y * (r3 + y * (r4 + y * (r5 + y * r6)))));
+        r = 0.5 * y + p / q;
+        z = 1.0; /* lgamma(1+s) = log(s) + lgamma(s) */
+        switch (i) {
+        case 7: z *= y + 6.0; /* fall through */
+        case 6: z *= y + 5.0; /* fall through */
+        case 5: z *= y + 4.0; /* fall through */
+        case 4: z *= y + 3.0; /* fall through */
+        case 3:
+            z *= y + 2.0;
+            r += log(z);
+            break;
+        }
+    } else if (ix < 0x43900000) { /* 8.0 <= x < 2**58 */
+        t = log(x);
+        z = 1.0 / x;
+        y = z * z;
+        w = w0 + z * (w1 + y * (w2 + y * (w3 + y * (w4 + y * (w5 + y * w6)))));
+        r = (x - 0.5) * (t - 1.0) + w;
+    } else /* 2**58 <= x <= inf */
+        r = x * (log(x) - 1.0);
+    if (sign)
+        r = nadj - r;
+    return r;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 440d002869c..14aeef4c1e7 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -94,19 +94,6 @@ static float CDECL unix_fmaf( float x, float y, float z )
 #endif
 }
 
-/*********************************************************************
- *      lgamma
- */
-static double CDECL unix_lgamma(double x)
-{
-#ifdef HAVE_LGAMMA
-    return lgamma(x);
-#else
-    FIXME( "not implemented\n" );
-    return 0;
-#endif
-}
-
 /*********************************************************************
  *      lgammaf
  */
@@ -169,7 +156,6 @@ static const struct unix_funcs funcs =
     unix_exp2,
     unix_exp2f,
     unix_fmaf,
-    unix_lgamma,
     unix_lgammaf,
     unix_pow,
     unix_powf,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index fc2ceb7798d..4309ff835a0 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -28,7 +28,6 @@ struct unix_funcs
     double          (CDECL *exp2)(double x);
     float           (CDECL *exp2f)(float x);
     float           (CDECL *fmaf)(float x, float y, float z);
-    double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
     double          (CDECL *pow)(double x, double y);
     float           (CDECL *powf)(float x, float y);
diff --git a/include/config.h.in b/include/config.h.in
index 252c2819fcc..dd34230b268 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -297,9 +297,6 @@
 /* Define to 1 if you have the `ldap_parse_vlv_control' function. */
 #undef HAVE_LDAP_PARSE_VLV_CONTROL
 
-/* Define to 1 if you have the `lgamma' function. */
-#undef HAVE_LGAMMA
-
 /* Define to 1 if you have the `lgammaf' function. */
 #undef HAVE_LGAMMAF
 
-- 
2.31.1

From 7e6756d0f4495f37ac520685e3baeec053f478ed Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:45 +0200
Subject: [PATCH 08/10] msvcrt: Import log2 implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |   1 -
 configure.ac          |   1 -
 dlls/msvcrt/math.c    | 247 +++++++++++++++++++++++++++++++++++++++++-
 dlls/msvcrt/unixlib.c |  13 ---
 dlls/msvcrt/unixlib.h |   1 -
 include/config.h.in   |   3 -
 6 files changed, 244 insertions(+), 22 deletions(-)

diff --git a/configure.ac b/configure.ac
index 71c95cbdd90..cb2b0cbeb17 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2661,7 +2661,6 @@ AC_CHECK_FUNCS(\
 	fmaf \
 	lgamma \
 	lgammaf \
-	log2 \
 	tgamma \
 	tgammaf
 )
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 88a5ecd240f..ae9debce20c 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -7166,12 +7166,253 @@ float CDECL log1pf(float x)
 
 /*********************************************************************
  *      log2 (MSVCR120.@)
+ *
+ * Copied from musl: src/math/log2.c
  */
 double CDECL log2(double x)
 {
-    if (x < 0) *_errno() = EDOM;
-    else if (x == 0) *_errno() = ERANGE;
-    return unix_funcs->log2( x );
+    static const double invln2hi = 0x1.7154765200000p+0,
+        invln2lo = 0x1.705fc2eefa200p-33;
+    static const double A[] = {
+        -0x1.71547652b8339p-1,
+        0x1.ec709dc3a04bep-2,
+        -0x1.7154764702ffbp-2,
+        0x1.2776c50034c48p-2,
+        -0x1.ec7b328ea92bcp-3,
+        0x1.a6225e117f92ep-3
+    };
+    static const double B[] = {
+        -0x1.71547652b82fep-1,
+        0x1.ec709dc3a03f7p-2,
+        -0x1.71547652b7c3fp-2,
+        0x1.2776c50f05be4p-2,
+        -0x1.ec709dd768fe5p-3,
+        0x1.a61761ec4e736p-3,
+        -0x1.7153fbc64a79bp-3,
+        0x1.484d154f01b4ap-3,
+        -0x1.289e4a72c383cp-3,
+        0x1.0b32f285aee66p-3
+    };
+    static const struct {
+        double invc, logc;
+    } T[] = {
+        {0x1.724286bb1acf8p+0, -0x1.1095feecdb000p-1},
+        {0x1.6e1f766d2cca1p+0, -0x1.08494bd76d000p-1},
+        {0x1.6a13d0e30d48ap+0, -0x1.00143aee8f800p-1},
+        {0x1.661ec32d06c85p+0, -0x1.efec5360b4000p-2},
+        {0x1.623fa951198f8p+0, -0x1.dfdd91ab7e000p-2},
+        {0x1.5e75ba4cf026cp+0, -0x1.cffae0cc79000p-2},
+        {0x1.5ac055a214fb8p+0, -0x1.c043811fda000p-2},
+        {0x1.571ed0f166e1ep+0, -0x1.b0b67323ae000p-2},
+        {0x1.53909590bf835p+0, -0x1.a152f5a2db000p-2},
+        {0x1.5014fed61adddp+0, -0x1.9217f5af86000p-2},
+        {0x1.4cab88e487bd0p+0, -0x1.8304db0719000p-2},
+        {0x1.49539b4334feep+0, -0x1.74189f9a9e000p-2},
+        {0x1.460cbdfafd569p+0, -0x1.6552bb5199000p-2},
+        {0x1.42d664ee4b953p+0, -0x1.56b23a29b1000p-2},
+        {0x1.3fb01111dd8a6p+0, -0x1.483650f5fa000p-2},
+        {0x1.3c995b70c5836p+0, -0x1.39de937f6a000p-2},
+        {0x1.3991c4ab6fd4ap+0, -0x1.2baa1538d6000p-2},
+        {0x1.3698e0ce099b5p+0, -0x1.1d98340ca4000p-2},
+        {0x1.33ae48213e7b2p+0, -0x1.0fa853a40e000p-2},
+        {0x1.30d191985bdb1p+0, -0x1.01d9c32e73000p-2},
+        {0x1.2e025cab271d7p+0, -0x1.e857da2fa6000p-3},
+        {0x1.2b404cf13cd82p+0, -0x1.cd3c8633d8000p-3},
+        {0x1.288b02c7ccb50p+0, -0x1.b26034c14a000p-3},
+        {0x1.25e2263944de5p+0, -0x1.97c1c2f4fe000p-3},
+        {0x1.234563d8615b1p+0, -0x1.7d6023f800000p-3},
+        {0x1.20b46e33eaf38p+0, -0x1.633a71a05e000p-3},
+        {0x1.1e2eefdcda3ddp+0, -0x1.494f5e9570000p-3},
+        {0x1.1bb4a580b3930p+0, -0x1.2f9e424e0a000p-3},
+        {0x1.19453847f2200p+0, -0x1.162595afdc000p-3},
+        {0x1.16e06c0d5d73cp+0, -0x1.f9c9a75bd8000p-4},
+        {0x1.1485f47b7e4c2p+0, -0x1.c7b575bf9c000p-4},
+        {0x1.12358ad0085d1p+0, -0x1.960c60ff48000p-4},
+        {0x1.0fef00f532227p+0, -0x1.64ce247b60000p-4},
+        {0x1.0db2077d03a8fp+0, -0x1.33f78b2014000p-4},
+        {0x1.0b7e6d65980d9p+0, -0x1.0387d1a42c000p-4},
+        {0x1.0953efe7b408dp+0, -0x1.a6f9208b50000p-5},
+        {0x1.07325cac53b83p+0, -0x1.47a954f770000p-5},
+        {0x1.05197e40d1b5cp+0, -0x1.d23a8c50c0000p-6},
+        {0x1.03091c1208ea2p+0, -0x1.16a2629780000p-6},
+        {0x1.0101025b37e21p+0, -0x1.720f8d8e80000p-8},
+        {0x1.fc07ef9caa76bp-1, 0x1.6fe53b1500000p-7},
+        {0x1.f4465d3f6f184p-1, 0x1.11ccce10f8000p-5},
+        {0x1.ecc079f84107fp-1, 0x1.c4dfc8c8b8000p-5},
+        {0x1.e573a99975ae8p-1, 0x1.3aa321e574000p-4},
+        {0x1.de5d6f0bd3de6p-1, 0x1.918a0d08b8000p-4},
+        {0x1.d77b681ff38b3p-1, 0x1.e72e9da044000p-4},
+        {0x1.d0cb5724de943p-1, 0x1.1dcd2507f6000p-3},
+        {0x1.ca4b2dc0e7563p-1, 0x1.476ab03dea000p-3},
+        {0x1.c3f8ee8d6cb51p-1, 0x1.7074377e22000p-3},
+        {0x1.bdd2b4f020c4cp-1, 0x1.98ede8ba94000p-3},
+        {0x1.b7d6c006015cap-1, 0x1.c0db86ad2e000p-3},
+        {0x1.b20366e2e338fp-1, 0x1.e840aafcee000p-3},
+        {0x1.ac57026295039p-1, 0x1.0790ab4678000p-2},
+        {0x1.a6d01bc2731ddp-1, 0x1.1ac056801c000p-2},
+        {0x1.a16d3bc3ff18bp-1, 0x1.2db11d4fee000p-2},
+        {0x1.9c2d14967feadp-1, 0x1.406464ec58000p-2},
+        {0x1.970e4f47c9902p-1, 0x1.52dbe093af000p-2},
+        {0x1.920fb3982bcf2p-1, 0x1.651902050d000p-2},
+        {0x1.8d30187f759f1p-1, 0x1.771d2cdeaf000p-2},
+        {0x1.886e5ebb9f66dp-1, 0x1.88e9c857d9000p-2},
+        {0x1.83c97b658b994p-1, 0x1.9a80155e16000p-2},
+        {0x1.7f405ffc61022p-1, 0x1.abe186ed3d000p-2},
+        {0x1.7ad22181415cap-1, 0x1.bd0f2aea0e000p-2},
+        {0x1.767dcf99eff8cp-1, 0x1.ce0a43dbf4000p-2}
+    };
+    static const struct {
+        double chi, clo;
+    } T2[] = {
+        {0x1.6200012b90a8ep-1, 0x1.904ab0644b605p-55},
+        {0x1.66000045734a6p-1, 0x1.1ff9bea62f7a9p-57},
+        {0x1.69fffc325f2c5p-1, 0x1.27ecfcb3c90bap-55},
+        {0x1.6e00038b95a04p-1, 0x1.8ff8856739326p-55},
+        {0x1.71fffe09994e3p-1, 0x1.afd40275f82b1p-55},
+        {0x1.7600015590e1p-1, -0x1.2fd75b4238341p-56},
+        {0x1.7a00012655bd5p-1, 0x1.808e67c242b76p-56},
+        {0x1.7e0003259e9a6p-1, -0x1.208e426f622b7p-57},
+        {0x1.81fffedb4b2d2p-1, -0x1.402461ea5c92fp-55},
+        {0x1.860002dfafcc3p-1, 0x1.df7f4a2f29a1fp-57},
+        {0x1.89ffff78c6b5p-1, -0x1.e0453094995fdp-55},
+        {0x1.8e00039671566p-1, -0x1.a04f3bec77b45p-55},
+        {0x1.91fffe2bf1745p-1, -0x1.7fa34400e203cp-56},
+        {0x1.95fffcc5c9fd1p-1, -0x1.6ff8005a0695dp-56},
+        {0x1.9a0003bba4767p-1, 0x1.0f8c4c4ec7e03p-56},
+        {0x1.9dfffe7b92da5p-1, 0x1.e7fd9478c4602p-55},
+        {0x1.a1fffd72efdafp-1, -0x1.a0c554dcdae7ep-57},
+        {0x1.a5fffde04ff95p-1, 0x1.67da98ce9b26bp-55},
+        {0x1.a9fffca5e8d2bp-1, -0x1.284c9b54c13dep-55},
+        {0x1.adfffddad03eap-1, 0x1.812c8ea602e3cp-58},
+        {0x1.b1ffff10d3d4dp-1, -0x1.efaddad27789cp-55},
+        {0x1.b5fffce21165ap-1, 0x1.3cb1719c61237p-58},
+        {0x1.b9fffd950e674p-1, 0x1.3f7d94194cep-56},
+        {0x1.be000139ca8afp-1, 0x1.50ac4215d9bcp-56},
+        {0x1.c20005b46df99p-1, 0x1.beea653e9c1c9p-57},
+        {0x1.c600040b9f7aep-1, -0x1.c079f274a70d6p-56},
+        {0x1.ca0006255fd8ap-1, -0x1.a0b4076e84c1fp-56},
+        {0x1.cdfffd94c095dp-1, 0x1.8f933f99ab5d7p-55},
+        {0x1.d1ffff975d6cfp-1, -0x1.82c08665fe1bep-58},
+        {0x1.d5fffa2561c93p-1, -0x1.b04289bd295f3p-56},
+        {0x1.d9fff9d228b0cp-1, 0x1.70251340fa236p-55},
+        {0x1.de00065bc7e16p-1, -0x1.5011e16a4d80cp-56},
+        {0x1.e200002f64791p-1, 0x1.9802f09ef62ep-55},
+        {0x1.e600057d7a6d8p-1, -0x1.e0b75580cf7fap-56},
+        {0x1.ea00027edc00cp-1, -0x1.c848309459811p-55},
+        {0x1.ee0006cf5cb7cp-1, -0x1.f8027951576f4p-55},
+        {0x1.f2000782b7dccp-1, -0x1.f81d97274538fp-55},
+        {0x1.f6000260c450ap-1, -0x1.071002727ffdcp-59},
+        {0x1.f9fffe88cd533p-1, -0x1.81bdce1fda8bp-58},
+        {0x1.fdfffd50f8689p-1, 0x1.7f91acb918e6ep-55},
+        {0x1.0200004292367p+0, 0x1.b7ff365324681p-54},
+        {0x1.05fffe3e3d668p+0, 0x1.6fa08ddae957bp-55},
+        {0x1.0a0000a85a757p+0, -0x1.7e2de80d3fb91p-58},
+        {0x1.0e0001a5f3fccp+0, -0x1.1823305c5f014p-54},
+        {0x1.11ffff8afbaf5p+0, -0x1.bfabb6680bac2p-55},
+        {0x1.15fffe54d91adp+0, -0x1.d7f121737e7efp-54},
+        {0x1.1a00011ac36e1p+0, 0x1.c000a0516f5ffp-54},
+        {0x1.1e00019c84248p+0, -0x1.082fbe4da5dap-54},
+        {0x1.220000ffe5e6ep+0, -0x1.8fdd04c9cfb43p-55},
+        {0x1.26000269fd891p+0, 0x1.cfe2a7994d182p-55},
+        {0x1.2a00029a6e6dap+0, -0x1.00273715e8bc5p-56},
+        {0x1.2dfffe0293e39p+0, 0x1.b7c39dab2a6f9p-54},
+        {0x1.31ffff7dcf082p+0, 0x1.df1336edc5254p-56},
+        {0x1.35ffff05a8b6p+0, -0x1.e03564ccd31ebp-54},
+        {0x1.3a0002e0eaeccp+0, 0x1.5f0e74bd3a477p-56},
+        {0x1.3e000043bb236p+0, 0x1.c7dcb149d8833p-54},
+        {0x1.4200002d187ffp+0, 0x1.e08afcf2d3d28p-56},
+        {0x1.460000d387cb1p+0, 0x1.20837856599a6p-55},
+        {0x1.4a00004569f89p+0, -0x1.9fa5c904fbcd2p-55},
+        {0x1.4e000043543f3p+0, -0x1.81125ed175329p-56},
+        {0x1.51fffcc027f0fp+0, 0x1.883d8847754dcp-54},
+        {0x1.55ffffd87b36fp+0, -0x1.709e731d02807p-55},
+        {0x1.59ffff21df7bap+0, 0x1.7f79f68727b02p-55},
+        {0x1.5dfffebfc3481p+0, -0x1.180902e30e93ep-54}
+    };
+
+    double z, r, r2, r4, y, invc, logc, kd, hi, lo, t1, t2, t3, p, rhi, rlo;
+    UINT64 ix, iz, tmp;
+    UINT32 top;
+    int k, i;
+
+    ix = *(UINT64*)&x;
+    top = ix >> 48;
+    if (ix - 0x3feea4af00000000ULL < 0x210aa00000000ULL) {
+        /* Handle close to 1.0 inputs separately.  */
+        /* Fix sign of zero with downward rounding when x==1.  */
+        if (ix == 0x3ff0000000000000ULL)
+            return 0;
+        r = x - 1.0;
+        *(UINT64*)&rhi = *(UINT64*)&r & -1ULL << 32;
+        rlo = r - rhi;
+        hi = rhi * invln2hi;
+        lo = rlo * invln2hi + r * invln2lo;
+        r2 = r * r; /* rounding error: 0x1p-62.  */
+        r4 = r2 * r2;
+        /* Worst-case error is less than 0.54 ULP (0.55 ULP without fma).  */
+        p = r2 * (B[0] + r * B[1]);
+        y = hi + p;
+        lo += hi - y + p;
+        lo += r4 * (B[2] + r * B[3] + r2 * (B[4] + r * B[5]) +
+                r4 * (B[6] + r * B[7] + r2 * (B[8] + r * B[9])));
+        y += lo;
+        return y;
+    }
+    if (top - 0x0010 >= 0x7ff0 - 0x0010) {
+        /* x < 0x1p-1022 or inf or nan.  */
+        if (ix * 2 == 0) {
+            *_errno() = ERANGE;
+            return -1.0 / x;
+        }
+        if (ix == 0x7ff0000000000000ULL) /* log(inf) == inf.  */
+            return x;
+        if ((top & 0x7ff0) == 0x7ff0 && (ix & 0xfffffffffffffULL))
+            return x;
+        if (top & 0x8000) {
+            *_errno() = EDOM;
+            return (x - x) / (x - x);
+        }
+        /* x is subnormal, normalize it.  */
+        x *= 0x1p52;
+        ix = *(UINT64*)&x;
+        ix -= 52ULL << 52;
+    }
+
+    /* x = 2^k z; where z is in range [OFF,2*OFF) and exact.
+       The range is split into N subintervals.
+       The ith subinterval contains z and c is near its center.  */
+    tmp = ix - 0x3fe6000000000000ULL;
+    i = (tmp >> (52 - 6)) % (1 << 6);
+    k = (INT64)tmp >> 52; /* arithmetic shift */
+    iz = ix - (tmp & 0xfffULL << 52);
+    invc = T[i].invc;
+    logc = T[i].logc;
+    z = *(double*)&iz;
+    kd = k;
+
+    /* log2(x) = log2(z/c) + log2(c) + k.  */
+    /* r ~= z/c - 1, |r| < 1/(2*N).  */
+    /* rounding error: 0x1p-55/N + 0x1p-65.  */
+    r = (z - T2[i].chi - T2[i].clo) * invc;
+    *(UINT64*)&rhi = *(UINT64*)&r & -1ULL << 32;
+    rlo = r - rhi;
+    t1 = rhi * invln2hi;
+    t2 = rlo * invln2hi + r * invln2lo;
+
+    /* hi + lo = r/ln2 + log2(c) + k.  */
+    t3 = kd + logc;
+    hi = t3 + t1;
+    lo = t3 - hi + t1 + t2;
+
+    /* log2(r+1) = r/ln2 + r^2*poly(r).  */
+    /* Evaluation is optimized assuming superscalar pipelined execution.  */
+    r2 = r * r; /* rounding error: 0x1p-54/N^2.  */
+    r4 = r2 * r2;
+    /* Worst-case error if |y| > 0x1p-4: 0.547 ULP (0.550 ULP without fma).
+       ~ 0.5 + 2/N/ln2 + abs-poly-error*0x1p56 ULP (+ 0.003 ULP without fma).  */
+    p = A[0] + r * A[1] + r2 * (A[2] + r * A[3]) + r4 * (A[4] + r * A[5]);
+    y = lo + r2 * p + hi;
+    return y;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index b23afaf7123..440d002869c 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -120,18 +120,6 @@ static float CDECL unix_lgammaf(float x)
 #endif
 }
 
-/*********************************************************************
- *      log2
- */
-static double CDECL unix_log2(double x)
-{
-#ifdef HAVE_LOG2
-    return log2(x);
-#else
-    return log(x) / log(2);
-#endif
-}
-
 /*********************************************************************
  *      pow
  */
@@ -183,7 +171,6 @@ static const struct unix_funcs funcs =
     unix_fmaf,
     unix_lgamma,
     unix_lgammaf,
-    unix_log2,
     unix_pow,
     unix_powf,
     unix_tgamma,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 85f74e5fb12..fc2ceb7798d 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -30,7 +30,6 @@ struct unix_funcs
     float           (CDECL *fmaf)(float x, float y, float z);
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
-    double          (CDECL *log2)(double x);
     double          (CDECL *pow)(double x, double y);
     float           (CDECL *powf)(float x, float y);
     double          (CDECL *tgamma)(double x);
diff --git a/include/config.h.in b/include/config.h.in
index d0e3ccb60fe..252c2819fcc 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -408,9 +408,6 @@
 /* Define to 1 if you have the <linux/videodev2.h> header file. */
 #undef HAVE_LINUX_VIDEODEV2_H
 
-/* Define to 1 if you have the `log2' function. */
-#undef HAVE_LOG2
-
 /* Define to 1 if you have the `lstat' function. */
 #undef HAVE_LSTAT
 
-- 
2.31.1

From 301bde60d3335ec78aa4bb4622dc14c5ea1eec92 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:41 +0200
Subject: [PATCH 07/10] msvcrt: Import log2f implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |  1 -
 configure.ac          |  1 -
 dlls/msvcrt/math.c    | 83 +++++++++++++++++++++++++++++++++++++++++--
 dlls/msvcrt/unixlib.c | 13 -------
 dlls/msvcrt/unixlib.h |  1 -
 include/config.h.in   |  3 --
 6 files changed, 80 insertions(+), 22 deletions(-)

diff --git a/configure.ac b/configure.ac
index b13c2ad3182..71c95cbdd90 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2662,7 +2662,6 @@ AC_CHECK_FUNCS(\
 	lgamma \
 	lgammaf \
 	log2 \
-	log2f \
 	tgamma \
 	tgammaf
 )
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 0176b6544c0..88a5ecd240f 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -7176,12 +7176,89 @@ double CDECL log2(double x)
 
 /*********************************************************************
  *      log2f (MSVCR120.@)
+ *
+ * Copied from musl: src/math/log2f.c
  */
 float CDECL log2f(float x)
 {
-    if (x < 0) *_errno() = EDOM;
-    else if (x == 0) *_errno() = ERANGE;
-    return unix_funcs->log2f( x );
+    static const double A[] = {
+        -0x1.712b6f70a7e4dp-2,
+        0x1.ecabf496832ep-2,
+        -0x1.715479ffae3dep-1,
+        0x1.715475f35c8b8p0
+    };
+    static const struct {
+        double invc, logc;
+    } T[] = {
+        { 0x1.661ec79f8f3bep+0, -0x1.efec65b963019p-2 },
+        { 0x1.571ed4aaf883dp+0, -0x1.b0b6832d4fca4p-2 },
+        { 0x1.49539f0f010bp+0, -0x1.7418b0a1fb77bp-2 },
+        { 0x1.3c995b0b80385p+0, -0x1.39de91a6dcf7bp-2 },
+        { 0x1.30d190c8864a5p+0, -0x1.01d9bf3f2b631p-2 },
+        { 0x1.25e227b0b8eap+0, -0x1.97c1d1b3b7afp-3 },
+        { 0x1.1bb4a4a1a343fp+0, -0x1.2f9e393af3c9fp-3 },
+        { 0x1.12358f08ae5bap+0, -0x1.960cbbf788d5cp-4 },
+        { 0x1.0953f419900a7p+0, -0x1.a6f9db6475fcep-5 },
+        { 0x1p+0, 0x0p+0 },
+        { 0x1.e608cfd9a47acp-1, 0x1.338ca9f24f53dp-4 },
+        { 0x1.ca4b31f026aap-1, 0x1.476a9543891bap-3 },
+        { 0x1.b2036576afce6p-1, 0x1.e840b4ac4e4d2p-3 },
+        { 0x1.9c2d163a1aa2dp-1, 0x1.40645f0c6651cp-2 },
+        { 0x1.886e6037841edp-1, 0x1.88e9c2c1b9ff8p-2 },
+        { 0x1.767dcf5534862p-1, 0x1.ce0a44eb17bccp-2 }
+    };
+
+    double z, r, r2, p, y, y0, invc, logc;
+    UINT32 ix, iz, top, tmp;
+    int k, i;
+
+    ix = *(UINT32*)&x;
+    /* Fix sign of zero with downward rounding when x==1. */
+    if (ix == 0x3f800000)
+        return 0;
+    if (ix - 0x00800000 >= 0x7f800000 - 0x00800000) {
+        /* x < 0x1p-126 or inf or nan. */
+        if (ix * 2 == 0) {
+            *_errno() = ERANGE;
+            return -1.0f / x;
+        }
+        if (ix == 0x7f800000) /* log2(inf) == inf. */
+            return x;
+        if (ix * 2 > 0xff000000)
+            return x;
+        if (ix & 0x80000000) {
+            *_errno() = EDOM;
+            return (x - x) / (x - x);
+        }
+        /* x is subnormal, normalize it. */
+        x *= 0x1p23f;
+        ix = *(UINT32*)&x;
+        ix -= 23 << 23;
+    }
+
+    /* x = 2^k z; where z is in range [OFF,2*OFF] and exact.
+       The range is split into N subintervals.
+       The ith subinterval contains z and c is near its center. */
+    tmp = ix - 0x3f330000;
+    i = (tmp >> (23 - 4)) % (1 << 4);
+    top = tmp & 0xff800000;
+    iz = ix - top;
+    k = (INT32)tmp >> 23; /* arithmetic shift */
+    invc = T[i].invc;
+    logc = T[i].logc;
+    z = *(float*)&iz;
+
+    /* log2(x) = log1p(z/c-1)/ln2 + log2(c) + k */
+    r = z * invc - 1;
+    y0 = logc + (double)k;
+
+    /* Pipelined polynomial evaluation to approximate log1p(r)/ln2. */
+    r2 = r * r;
+    y = A[1] * r + A[2];
+    y = A[0] * r2 + y;
+    p = A[3] * r + y0;
+    y = y * r2 + p;
+    return y;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 4311de356df..b23afaf7123 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -132,18 +132,6 @@ static double CDECL unix_log2(double x)
 #endif
 }
 
-/*********************************************************************
- *      log2f
- */
-static float CDECL unix_log2f(float x)
-{
-#ifdef HAVE_LOG2F
-    return log2f(x);
-#else
-    return unix_log2(x);
-#endif
-}
-
 /*********************************************************************
  *      pow
  */
@@ -196,7 +184,6 @@ static const struct unix_funcs funcs =
     unix_lgamma,
     unix_lgammaf,
     unix_log2,
-    unix_log2f,
     unix_pow,
     unix_powf,
     unix_tgamma,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index d907d68dd7d..85f74e5fb12 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -31,7 +31,6 @@ struct unix_funcs
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
     double          (CDECL *log2)(double x);
-    float           (CDECL *log2f)(float x);
     double          (CDECL *pow)(double x, double y);
     float           (CDECL *powf)(float x, float y);
     double          (CDECL *tgamma)(double x);
diff --git a/include/config.h.in b/include/config.h.in
index 1b308f3d34c..d0e3ccb60fe 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -411,9 +411,6 @@
 /* Define to 1 if you have the `log2' function. */
 #undef HAVE_LOG2
 
-/* Define to 1 if you have the `log2f' function. */
-#undef HAVE_LOG2F
-
 /* Define to 1 if you have the `lstat' function. */
 #undef HAVE_LSTAT
 
-- 
2.31.1

From b29096cce1cbed40f539ed004aa82dbcf5fd8a1d Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:37 +0200
Subject: [PATCH 06/10] msvcrt: Import log10f implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/math.c    | 60 ++++++++++++++++++++++++++++++++++++++++---
 dlls/msvcrt/unixlib.c |  9 -------
 dlls/msvcrt/unixlib.h |  1 -
 3 files changed, 56 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 4eb759c2dda..0176b6544c0 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -1295,10 +1295,62 @@ float CDECL logf( float x )
  */
 float CDECL log10f( float x )
 {
-  float ret = unix_funcs->log10f( x );
-  if (x < 0.0) return math_error(_DOMAIN, "log10f", x, 0, ret);
-  if (x == 0.0) return math_error(_SING, "log10f", x, 0, ret);
-  return ret;
+    static const float ivln10hi = 4.3432617188e-01,
+        ivln10lo = -3.1689971365e-05,
+        log10_2hi = 3.0102920532e-01,
+        log10_2lo = 7.9034151668e-07,
+        Lg1 = 0xaaaaaa.0p-24,
+        Lg2 = 0xccce13.0p-25,
+        Lg3 = 0x91e9ee.0p-25,
+        Lg4 = 0xf89e26.0p-26;
+
+    union {float f; UINT32 i;} u = {x};
+    float hfsq, f, s, z, R, w, t1, t2, dk, hi, lo;
+    UINT32 ix;
+    int k;
+
+    ix = u.i;
+    k = 0;
+    if (ix < 0x00800000 || ix >> 31) { /* x < 2**-126 */
+        if (ix << 1 == 0)
+            return math_error(_SING, "log10f", x, 0, -1 / (x * x));
+        if ((ix & ~(1u << 31)) > 0x7f800000)
+            return x;
+        if (ix >> 31)
+            return math_error(_DOMAIN, "log10f", x, 0, (x - x) / (x - x));
+        /* subnormal number, scale up x */
+        k -= 25;
+        x *= 0x1p25f;
+        u.f = x;
+        ix = u.i;
+    } else if (ix >= 0x7f800000) {
+        return x;
+    } else if (ix == 0x3f800000)
+        return 0;
+
+    /* reduce x into [sqrt(2)/2, sqrt(2)] */
+    ix += 0x3f800000 - 0x3f3504f3;
+    k += (int)(ix >> 23) - 0x7f;
+    ix = (ix & 0x007fffff) + 0x3f3504f3;
+    u.i = ix;
+    x = u.f;
+
+    f = x - 1.0f;
+    s = f / (2.0f + f);
+    z = s * s;
+    w = z * z;
+    t1= w * (Lg2 + w * Lg4);
+    t2= z * (Lg1 + w * Lg3);
+    R = t2 + t1;
+    hfsq = 0.5f * f * f;
+
+    hi = f - hfsq;
+    u.f = hi;
+    u.i &= 0xfffff000;
+    hi = u.f;
+    lo = f - hi - hfsq + s * (hfsq + R);
+    dk = k;
+    return dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi + hi * ivln10hi + dk * log10_2hi;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 436accde122..4311de356df 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -120,14 +120,6 @@ static float CDECL unix_lgammaf(float x)
 #endif
 }
 
-/*********************************************************************
- *      log10f
- */
-static float CDECL unix_log10f( float x )
-{
-    return log10f( x );
-}
-
 /*********************************************************************
  *      log2
  */
@@ -203,7 +195,6 @@ static const struct unix_funcs funcs =
     unix_fmaf,
     unix_lgamma,
     unix_lgammaf,
-    unix_log10f,
     unix_log2,
     unix_log2f,
     unix_pow,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 6ff2a520224..d907d68dd7d 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -30,7 +30,6 @@ struct unix_funcs
     float           (CDECL *fmaf)(float x, float y, float z);
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
-    float           (CDECL *log10f)(float x);
     double          (CDECL *log2)(double x);
     float           (CDECL *log2f)(float x);
     double          (CDECL *pow)(double x, double y);
-- 
2.31.1

From cef75b3b19d8c21e2d941de55f04f587d521a719 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:35 +0200
Subject: [PATCH 05/10] msvcrt: Import log10 implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/math.c    | 80 ++++++++++++++++++++++++++++++++++++++++---
 dlls/msvcrt/unixlib.c |  9 -----
 dlls/msvcrt/unixlib.h |  1 -
 3 files changed, 76 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 5702131cec9..4eb759c2dda 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -2964,10 +2964,82 @@ double CDECL log( double x )
  */
 double CDECL log10( double x )
 {
-  double ret = unix_funcs->log10( x );
-  if (x < 0.0) return math_error(_DOMAIN, "log10", x, 0, ret);
-  if (x == 0.0) return math_error(_SING, "log10", x, 0, ret);
-  return ret;
+    static const double ivln10hi = 4.34294481878168880939e-01,
+        ivln10lo = 2.50829467116452752298e-11,
+        log10_2hi = 3.01029995663611771306e-01,
+        log10_2lo = 3.69423907715893078616e-13,
+        Lg1 = 6.666666666666735130e-01,
+        Lg2 = 3.999999999940941908e-01,
+        Lg3 = 2.857142874366239149e-01,
+        Lg4 = 2.222219843214978396e-01,
+        Lg5 = 1.818357216161805012e-01,
+        Lg6 = 1.531383769920937332e-01,
+        Lg7 = 1.479819860511658591e-01;
+
+    union {double f; UINT64 i;} u = {x};
+    double hfsq, f, s, z, R, w, t1, t2, dk, y, hi, lo, val_hi, val_lo;
+    UINT32 hx;
+    int k;
+
+    hx = u.i >> 32;
+    k = 0;
+    if (hx < 0x00100000 || hx >> 31) {
+        if (u.i << 1 == 0)
+            return math_error(_SING, "log10", x, 0, -1 / (x * x));
+        if ((u.i & ~(1ULL << 63)) > 0x7ff0000000000000ULL)
+            return x;
+        if (hx >> 31)
+            return math_error(_DOMAIN, "log10", x, 0, (x - x) / (x - x));
+        /* subnormal number, scale x up */
+        k -= 54;
+        x *= 0x1p54;
+        u.f = x;
+        hx = u.i >> 32;
+    } else if (hx >= 0x7ff00000) {
+        return x;
+    } else if (hx == 0x3ff00000 && u.i<<32 == 0)
+        return 0;
+
+    /* reduce x into [sqrt(2)/2, sqrt(2)] */
+    hx += 0x3ff00000 - 0x3fe6a09e;
+    k += (int)(hx >> 20) - 0x3ff;
+    hx = (hx & 0x000fffff) + 0x3fe6a09e;
+    u.i = (UINT64)hx << 32 | (u.i & 0xffffffff);
+    x = u.f;
+
+    f = x - 1.0;
+    hfsq = 0.5 * f * f;
+    s = f / (2.0 + f);
+    z = s * s;
+    w = z * z;
+    t1 = w * (Lg2 + w * (Lg4 + w * Lg6));
+    t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));
+    R = t2 + t1;
+
+    /* hi+lo = f - hfsq + s*(hfsq+R) ~ log(1+f) */
+    hi = f - hfsq;
+    u.f = hi;
+    u.i &= (UINT64)-1 << 32;
+    hi = u.f;
+    lo = f - hi - hfsq + s * (hfsq + R);
+
+    /* val_hi+val_lo ~ log10(1+f) + k*log10(2) */
+    val_hi = hi * ivln10hi;
+    dk = k;
+    y = dk * log10_2hi;
+    val_lo = dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi;
+
+    /*
+     * Extra precision in for adding y is not strictly needed
+     * since there is no very large cancellation near x = sqrt(2) or
+     * x = 1/sqrt(2), but we do it anyway since it costs little on CPUs
+     * with some parallelism and it reduces the error for many args.
+     */
+    w = y + val_hi;
+    val_lo += (y - w) + val_hi;
+    val_hi = w;
+
+    return val_lo + val_hi;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 3b003a846c8..436accde122 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -120,14 +120,6 @@ static float CDECL unix_lgammaf(float x)
 #endif
 }
 
-/*********************************************************************
- *      log10
- */
-static double CDECL unix_log10( double x )
-{
-    return log10( x );
-}
-
 /*********************************************************************
  *      log10f
  */
@@ -211,7 +203,6 @@ static const struct unix_funcs funcs =
     unix_fmaf,
     unix_lgamma,
     unix_lgammaf,
-    unix_log10,
     unix_log10f,
     unix_log2,
     unix_log2f,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 7e976949e04..6ff2a520224 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -30,7 +30,6 @@ struct unix_funcs
     float           (CDECL *fmaf)(float x, float y, float z);
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
-    double          (CDECL *log10)(double x);
     float           (CDECL *log10f)(float x);
     double          (CDECL *log2)(double x);
     float           (CDECL *log2f)(float x);
-- 
2.31.1

From ff7faafda68f697b38270569031f71f151d2dc0f Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:30 +0200
Subject: [PATCH 04/10] msvcrt: Import log1pf implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |  1 -
 configure.ac          |  1 -
 dlls/msvcrt/math.c    | 66 +++++++++++++++++++++++++++++++++++++++++--
 dlls/msvcrt/unixlib.c | 13 ---------
 dlls/msvcrt/unixlib.h |  1 -
 include/config.h.in   |  3 --
 6 files changed, 63 insertions(+), 22 deletions(-)

diff --git a/configure.ac b/configure.ac
index accdbaf6216..b13c2ad3182 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2661,7 +2661,6 @@ AC_CHECK_FUNCS(\
 	fmaf \
 	lgamma \
 	lgammaf \
-	log1pf \
 	log2 \
 	log2f \
 	tgamma \
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index fbc97aedce4..5702131cec9 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -6972,12 +6972,72 @@ double CDECL log1p(double x)
 
 /*********************************************************************
  *      log1pf (MSVCR120.@)
+ *
+ * Copied from musl: src/math/log1pf.c
  */
 float CDECL log1pf(float x)
 {
-    if (x < -1) *_errno() = EDOM;
-    else if (x == -1) *_errno() = ERANGE;
-    return unix_funcs->log1pf( x );
+    static const float ln2_hi = 6.9313812256e-01,
+        ln2_lo = 9.0580006145e-06,
+        Lg1 = 0xaaaaaa.0p-24,
+        Lg2 = 0xccce13.0p-25,
+        Lg3 = 0x91e9ee.0p-25,
+        Lg4 = 0xf89e26.0p-26;
+
+    union {float f; UINT32 i;} u = {x};
+    float hfsq, f, c, s, z, R, w, t1, t2, dk;
+    UINT32 ix, iu;
+    int k;
+
+    ix = u.i;
+    k = 1;
+    if (ix < 0x3ed413d0 || ix >> 31) { /* 1+x < sqrt(2)+ */
+        if (ix >= 0xbf800000) { /* x <= -1.0 */
+            if (x == -1) {
+                *_errno() = ERANGE;
+                return x / 0.0f; /* log1p(-1)=+inf */
+            }
+            *_errno() = EDOM;
+            return (x - x) / 0.0f; /* log1p(x<-1)=NaN */
+        }
+        if (ix<<1 < 0x33800000<<1) { /* |x| < 2**-24 */
+            /* underflow if subnormal */
+            if ((ix & 0x7f800000) == 0)
+                fp_barrierf(x * x);
+            return x;
+        }
+        if (ix <= 0xbe95f619) { /* sqrt(2)/2- <= 1+x < sqrt(2)+ */
+            k = 0;
+            c = 0;
+            f = x;
+        }
+    } else if (ix >= 0x7f800000)
+        return x;
+    if (k) {
+        u.f = 1 + x;
+        iu = u.i;
+        iu += 0x3f800000 - 0x3f3504f3;
+        k = (int)(iu >> 23) - 0x7f;
+        /* correction term ~ log(1+x)-log(u), avoid underflow in c/u */
+        if (k < 25) {
+            c = k >= 2 ? 1 - (u.f - x) : x - (u.f - 1);
+            c /= u.f;
+        } else
+            c = 0;
+        /* reduce u into [sqrt(2)/2, sqrt(2)] */
+        iu = (iu & 0x007fffff) + 0x3f3504f3;
+        u.i = iu;
+        f = u.f - 1;
+    }
+    s = f / (2.0f + f);
+    z = s * s;
+    w = z * z;
+    t1= w * (Lg2 + w * Lg4);
+    t2= z * (Lg1 + w * Lg3);
+    R = t2 + t1;
+    hfsq = 0.5f * f * f;
+    dk = k;
+    return s * (hfsq + R) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index f98d08e4909..3b003a846c8 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -136,18 +136,6 @@ static float CDECL unix_log10f( float x )
     return log10f( x );
 }
 
-/*********************************************************************
- *      log1pf
- */
-static float CDECL unix_log1pf(float x)
-{
-#ifdef HAVE_LOG1PF
-    return log1pf(x);
-#else
-    return log(1 + x);
-#endif
-}
-
 /*********************************************************************
  *      log2
  */
@@ -225,7 +213,6 @@ static const struct unix_funcs funcs =
     unix_lgammaf,
     unix_log10,
     unix_log10f,
-    unix_log1pf,
     unix_log2,
     unix_log2f,
     unix_pow,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 285deb22bc2..7e976949e04 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -32,7 +32,6 @@ struct unix_funcs
     float           (CDECL *lgammaf)(float x);
     double          (CDECL *log10)(double x);
     float           (CDECL *log10f)(float x);
-    float           (CDECL *log1pf)(float x);
     double          (CDECL *log2)(double x);
     float           (CDECL *log2f)(float x);
     double          (CDECL *pow)(double x, double y);
diff --git a/include/config.h.in b/include/config.h.in
index 7e6d36112d3..1b308f3d34c 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -408,9 +408,6 @@
 /* Define to 1 if you have the <linux/videodev2.h> header file. */
 #undef HAVE_LINUX_VIDEODEV2_H
 
-/* Define to 1 if you have the `log1pf' function. */
-#undef HAVE_LOG1PF
-
 /* Define to 1 if you have the `log2' function. */
 #undef HAVE_LOG2
 
-- 
2.31.1

From 2e6fa0a49804da29e683c72826960a95651ef41e Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:26 +0200
Subject: [PATCH 03/10] msvcrt: Import log1p implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 configure             |  1 -
 configure.ac          |  1 -
 dlls/msvcrt/math.c    | 70 +++++++++++++++++++++++++++++++++++++++++--
 dlls/msvcrt/unixlib.c | 13 --------
 dlls/msvcrt/unixlib.h |  1 -
 include/config.h.in   |  3 --
 6 files changed, 67 insertions(+), 22 deletions(-)

diff --git a/configure.ac b/configure.ac
index 23075b36a42..accdbaf6216 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2661,7 +2661,6 @@ AC_CHECK_FUNCS(\
 	fmaf \
 	lgamma \
 	lgammaf \
-	log1p \
 	log1pf \
 	log2 \
 	log2f \
diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 6e6d80f50a0..fbc97aedce4 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -6898,12 +6898,76 @@ float CDECL expm1f(float x)
 
 /*********************************************************************
  *      log1p (MSVCR120.@)
+ *
+ * Copied from musl: src/math/log1p.c
  */
 double CDECL log1p(double x)
 {
-    if (x < -1) *_errno() = EDOM;
-    else if (x == -1) *_errno() = ERANGE;
-    return unix_funcs->log1p( x );
+    static const double ln2_hi = 6.93147180369123816490e-01,
+        ln2_lo = 1.90821492927058770002e-10,
+        Lg1 = 6.666666666666735130e-01,
+        Lg2 = 3.999999999940941908e-01,
+        Lg3 = 2.857142874366239149e-01,
+        Lg4 = 2.222219843214978396e-01,
+        Lg5 = 1.818357216161805012e-01,
+        Lg6 = 1.531383769920937332e-01,
+        Lg7 = 1.479819860511658591e-01;
+
+    union {double f; UINT64 i;} u = {x};
+    double hfsq, f, c, s, z, R, w, t1, t2, dk;
+    UINT32 hx, hu;
+    int k;
+
+    hx = u.i >> 32;
+    k = 1;
+    if (hx < 0x3fda827a || hx >> 31) { /* 1+x < sqrt(2)+ */
+        if (hx >= 0xbff00000) { /* x <= -1.0 */
+            if (x == -1) {
+                *_errno() = ERANGE;
+                return x / 0.0; /* og1p(-1) = -inf */
+            }
+            *_errno() = EDOM;
+            return (x-x) / 0.0; /* log1p(x<-1) = NaN */
+        }
+        if (hx << 1 < 0x3ca00000 << 1) { /* |x| < 2**-53 */
+            fp_barrier(x + 0x1p120f);
+            /* underflow if subnormal */
+            if ((hx & 0x7ff00000) == 0)
+                fp_barrierf(x);
+            return x;
+        }
+        if (hx <= 0xbfd2bec4) { /* sqrt(2)/2- <= 1+x < sqrt(2)+ */
+            k = 0;
+            c = 0;
+            f = x;
+        }
+    } else if (hx >= 0x7ff00000)
+        return x;
+    if (k) {
+        u.f = 1 + x;
+        hu = u.i >> 32;
+        hu += 0x3ff00000 - 0x3fe6a09e;
+        k = (int)(hu >> 20) - 0x3ff;
+        /* correction term ~ log(1+x)-log(u), avoid underflow in c/u */
+        if (k < 54) {
+            c = k >= 2 ? 1 - (u.f - x) : x - (u.f - 1);
+            c /= u.f;
+        } else
+            c = 0;
+        /* reduce u into [sqrt(2)/2, sqrt(2)] */
+        hu = (hu & 0x000fffff) + 0x3fe6a09e;
+        u.i = (UINT64)hu << 32 | (u.i & 0xffffffff);
+        f = u.f - 1;
+    }
+    hfsq = 0.5 * f * f;
+    s = f / (2.0 + f);
+    z = s * s;
+    w = z * z;
+    t1 = w * (Lg2 + w * (Lg4 + w * Lg6));
+    t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));
+    R = t2 + t1;
+    dk = k;
+    return s * (hfsq + R) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index c880bcda8e2..f98d08e4909 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -136,18 +136,6 @@ static float CDECL unix_log10f( float x )
     return log10f( x );
 }
 
-/*********************************************************************
- *      log1p
- */
-static double CDECL unix_log1p(double x)
-{
-#ifdef HAVE_LOG1P
-    return log1p(x);
-#else
-    return log(1 + x);
-#endif
-}
-
 /*********************************************************************
  *      log1pf
  */
@@ -237,7 +225,6 @@ static const struct unix_funcs funcs =
     unix_lgammaf,
     unix_log10,
     unix_log10f,
-    unix_log1p,
     unix_log1pf,
     unix_log2,
     unix_log2f,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index bbec27c1061..285deb22bc2 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -32,7 +32,6 @@ struct unix_funcs
     float           (CDECL *lgammaf)(float x);
     double          (CDECL *log10)(double x);
     float           (CDECL *log10f)(float x);
-    double          (CDECL *log1p)(double x);
     float           (CDECL *log1pf)(float x);
     double          (CDECL *log2)(double x);
     float           (CDECL *log2f)(float x);
diff --git a/include/config.h.in b/include/config.h.in
index 3d1e5e6ca5a..7e6d36112d3 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -408,9 +408,6 @@
 /* Define to 1 if you have the <linux/videodev2.h> header file. */
 #undef HAVE_LINUX_VIDEODEV2_H
 
-/* Define to 1 if you have the `log1p' function. */
-#undef HAVE_LOG1P
-
 /* Define to 1 if you have the `log1pf' function. */
 #undef HAVE_LOG1PF
 
-- 
2.31.1

From 51a253d25a65be68f25d20844548d8272ee0a5c4 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:23 +0200
Subject: [PATCH 02/10] msvcrt: Import logf implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/math.c    | 78 ++++++++++++++++++++++++++++++++++++++++---
 dlls/msvcrt/unixlib.c |  9 -----
 dlls/msvcrt/unixlib.h |  1 -
 3 files changed, 74 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 02db8b3eeb5..6e6d80f50a0 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -1211,13 +1211,83 @@ float CDECL fmodf( float x, float y )
 
 /*********************************************************************
  *      logf (MSVCRT.@)
+ *
+ * Copied from musl: src/math/logf.c src/math/logf_data.c
  */
 float CDECL logf( float x )
 {
-    float ret = unix_funcs->logf( x );
-    if (x < 0.0) return math_error(_DOMAIN, "logf", x, 0, ret);
-    if (x == 0.0) return math_error(_SING, "logf", x, 0, ret);
-  return ret;
+    static const double Ln2 = 0x1.62e42fefa39efp-1;
+    static const double A[] = {
+        -0x1.00ea348b88334p-2,
+        0x1.5575b0be00b6ap-2,
+        -0x1.ffffef20a4123p-2
+    };
+    static const struct {
+        double invc, logc;
+    } T[] = {
+        { 0x1.661ec79f8f3bep+0, -0x1.57bf7808caadep-2 },
+        { 0x1.571ed4aaf883dp+0, -0x1.2bef0a7c06ddbp-2 },
+        { 0x1.49539f0f010bp+0, -0x1.01eae7f513a67p-2 },
+        { 0x1.3c995b0b80385p+0, -0x1.b31d8a68224e9p-3 },
+        { 0x1.30d190c8864a5p+0, -0x1.6574f0ac07758p-3 },
+        { 0x1.25e227b0b8eap+0, -0x1.1aa2bc79c81p-3 },
+        { 0x1.1bb4a4a1a343fp+0, -0x1.a4e76ce8c0e5ep-4 },
+        { 0x1.12358f08ae5bap+0, -0x1.1973c5a611cccp-4 },
+        { 0x1.0953f419900a7p+0, -0x1.252f438e10c1ep-5 },
+        { 0x1p+0, 0x0p+0 },
+        { 0x1.e608cfd9a47acp-1, 0x1.aa5aa5df25984p-5 },
+        { 0x1.ca4b31f026aap-1, 0x1.c5e53aa362eb4p-4 },
+        { 0x1.b2036576afce6p-1, 0x1.526e57720db08p-3 },
+        { 0x1.9c2d163a1aa2dp-1, 0x1.bc2860d22477p-3 },
+        { 0x1.886e6037841edp-1, 0x1.1058bc8a07ee1p-2 },
+        { 0x1.767dcf5534862p-1, 0x1.4043057b6ee09p-2 }
+    };
+
+    double z, r, r2, y, y0, invc, logc;
+    UINT32 ix, iz, tmp;
+    int k, i;
+
+    ix = *(UINT32*)&x;
+    /* Fix sign of zero with downward rounding when x==1. */
+    if (ix == 0x3f800000)
+        return 0;
+    if (ix - 0x00800000 >= 0x7f800000 - 0x00800000) {
+        /* x < 0x1p-126 or inf or nan. */
+        if (ix * 2 == 0)
+            return math_error(_SING, "logf", x, 0, -1.0 / x);
+        if (ix == 0x7f800000) /* log(inf) == inf. */
+            return x;
+        if (ix * 2 > 0xff000000)
+            return x;
+        if (ix & 0x80000000)
+            return math_error(_DOMAIN, "logf", x, 0, (x - x) / (x - x));
+        /* x is subnormal, normalize it. */
+        x *= 0x1p23f;
+        ix = *(UINT32*)&x;
+        ix -= 23 << 23;
+    }
+
+    /* x = 2^k z; where z is in range [OFF,2*OFF] and exact.
+       The range is split into N subintervals.
+       The ith subinterval contains z and c is near its center. */
+    tmp = ix - 0x3f330000;
+    i = (tmp >> (23 - 4)) % (1 << 4);
+    k = (INT32)tmp >> 23; /* arithmetic shift */
+    iz = ix - (tmp & 0xff << 23);
+    invc = T[i].invc;
+    logc = T[i].logc;
+    z = *(float*)&iz;
+
+    /* log(x) = log1p(z/c-1) + log(c) + k*Ln2 */
+    r = z * invc - 1;
+    y0 = logc + (double)k * Ln2;
+
+    /* Pipelined polynomial evaluation to approximate log1p(r). */
+    r2 = r * r;
+    y = A[1] * r + A[2];
+    y = A[0] * r2 + y;
+    y = y * r2 + (y0 + r);
+    return y;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index 8589601ef6a..c880bcda8e2 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -120,14 +120,6 @@ static float CDECL unix_lgammaf(float x)
 #endif
 }
 
-/*********************************************************************
- *      logf
- */
-static float CDECL unix_logf( float x )
-{
-    return logf( x );
-}
-
 /*********************************************************************
  *      log10
  */
@@ -243,7 +235,6 @@ static const struct unix_funcs funcs =
     unix_fmaf,
     unix_lgamma,
     unix_lgammaf,
-    unix_logf,
     unix_log10,
     unix_log10f,
     unix_log1p,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index db840b9d177..bbec27c1061 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -30,7 +30,6 @@ struct unix_funcs
     float           (CDECL *fmaf)(float x, float y, float z);
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
-    float           (CDECL *logf)(float x);
     double          (CDECL *log10)(double x);
     float           (CDECL *log10f)(float x);
     double          (CDECL *log1p)(double x);
-- 
2.31.1

From d1ef51df4236f19c721d12bd04fd244723721771 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 4 Jun 2021 18:25:20 +0200
Subject: [PATCH 01/10] msvcrt: Import log implementation from musl.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/math.c    | 370 +++++++++++++++++++++++++++++++++++++++++-
 dlls/msvcrt/unixlib.c |   9 -
 dlls/msvcrt/unixlib.h |   1 -
 3 files changed, 366 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index a3ebc48d1f7..02db8b3eeb5 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -2518,13 +2518,375 @@ double CDECL fmod( double x, double y )
 
 /*********************************************************************
  *		log (MSVCRT.@)
+ *
+ * Copied from musl: src/math/log.c src/math/log_data.c
  */
 double CDECL log( double x )
 {
-  double ret = unix_funcs->log( x );
-  if (x < 0.0) return math_error(_DOMAIN, "log", x, 0, ret);
-  if (x == 0.0) return math_error(_SING, "log", x, 0, ret);
-  return ret;
+    static const double Ln2hi = 0x1.62e42fefa3800p-1,
+        Ln2lo = 0x1.ef35793c76730p-45;
+    static const double A[] = {
+        -0x1.0000000000001p-1,
+        0x1.555555551305bp-2,
+        -0x1.fffffffeb459p-3,
+        0x1.999b324f10111p-3,
+        -0x1.55575e506c89fp-3
+    };
+    static const double B[] = {
+        -0x1p-1,
+        0x1.5555555555577p-2,
+        -0x1.ffffffffffdcbp-3,
+        0x1.999999995dd0cp-3,
+        -0x1.55555556745a7p-3,
+        0x1.24924a344de3p-3,
+        -0x1.fffffa4423d65p-4,
+        0x1.c7184282ad6cap-4,
+        -0x1.999eb43b068ffp-4,
+        0x1.78182f7afd085p-4,
+        -0x1.5521375d145cdp-4
+    };
+    static const struct {
+        double invc, logc;
+    } T[] = {
+        {0x1.734f0c3e0de9fp+0, -0x1.7cc7f79e69000p-2},
+        {0x1.713786a2ce91fp+0, -0x1.76feec20d0000p-2},
+        {0x1.6f26008fab5a0p+0, -0x1.713e31351e000p-2},
+        {0x1.6d1a61f138c7dp+0, -0x1.6b85b38287800p-2},
+        {0x1.6b1490bc5b4d1p+0, -0x1.65d5590807800p-2},
+        {0x1.69147332f0cbap+0, -0x1.602d076180000p-2},
+        {0x1.6719f18224223p+0, -0x1.5a8ca86909000p-2},
+        {0x1.6524f99a51ed9p+0, -0x1.54f4356035000p-2},
+        {0x1.63356aa8f24c4p+0, -0x1.4f637c36b4000p-2},
+        {0x1.614b36b9ddc14p+0, -0x1.49da7fda85000p-2},
+        {0x1.5f66452c65c4cp+0, -0x1.445923989a800p-2},
+        {0x1.5d867b5912c4fp+0, -0x1.3edf439b0b800p-2},
+        {0x1.5babccb5b90dep+0, -0x1.396ce448f7000p-2},
+        {0x1.59d61f2d91a78p+0, -0x1.3401e17bda000p-2},
+        {0x1.5805612465687p+0, -0x1.2e9e2ef468000p-2},
+        {0x1.56397cee76bd3p+0, -0x1.2941b3830e000p-2},
+        {0x1.54725e2a77f93p+0, -0x1.23ec58cda8800p-2},
+        {0x1.52aff42064583p+0, -0x1.1e9e129279000p-2},
+        {0x1.50f22dbb2bddfp+0, -0x1.1956d2b48f800p-2},
+        {0x1.4f38f4734ded7p+0, -0x1.141679ab9f800p-2},
+        {0x1.4d843cfde2840p+0, -0x1.0edd094ef9800p-2},
+        {0x1.4bd3ec078a3c8p+0, -0x1.09aa518db1000p-2},
+        {0x1.4a27fc3e0258ap+0, -0x1.047e65263b800p-2},
+        {0x1.4880524d48434p+0, -0x1.feb224586f000p-3},
+        {0x1.46dce1b192d0bp+0, -0x1.f474a7517b000p-3},
+        {0x1.453d9d3391854p+0, -0x1.ea4443d103000p-3},
+        {0x1.43a2744b4845ap+0, -0x1.e020d44e9b000p-3},
+        {0x1.420b54115f8fbp+0, -0x1.d60a22977f000p-3},
+        {0x1.40782da3ef4b1p+0, -0x1.cc00104959000p-3},
+        {0x1.3ee8f5d57fe8fp+0, -0x1.c202956891000p-3},
+        {0x1.3d5d9a00b4ce9p+0, -0x1.b81178d811000p-3},
+        {0x1.3bd60c010c12bp+0, -0x1.ae2c9ccd3d000p-3},
+        {0x1.3a5242b75dab8p+0, -0x1.a45402e129000p-3},
+        {0x1.38d22cd9fd002p+0, -0x1.9a877681df000p-3},
+        {0x1.3755bc5847a1cp+0, -0x1.90c6d69483000p-3},
+        {0x1.35dce49ad36e2p+0, -0x1.87120a645c000p-3},
+        {0x1.34679984dd440p+0, -0x1.7d68fb4143000p-3},
+        {0x1.32f5cceffcb24p+0, -0x1.73cb83c627000p-3},
+        {0x1.3187775a10d49p+0, -0x1.6a39a9b376000p-3},
+        {0x1.301c8373e3990p+0, -0x1.60b3154b7a000p-3},
+        {0x1.2eb4ebb95f841p+0, -0x1.5737d76243000p-3},
+        {0x1.2d50a0219a9d1p+0, -0x1.4dc7b8fc23000p-3},
+        {0x1.2bef9a8b7fd2ap+0, -0x1.4462c51d20000p-3},
+        {0x1.2a91c7a0c1babp+0, -0x1.3b08abc830000p-3},
+        {0x1.293726014b530p+0, -0x1.31b996b490000p-3},
+        {0x1.27dfa5757a1f5p+0, -0x1.2875490a44000p-3},
+        {0x1.268b39b1d3bbfp+0, -0x1.1f3b9f879a000p-3},
+        {0x1.2539d838ff5bdp+0, -0x1.160c8252ca000p-3},
+        {0x1.23eb7aac9083bp+0, -0x1.0ce7f57f72000p-3},
+        {0x1.22a012ba940b6p+0, -0x1.03cdc49fea000p-3},
+        {0x1.2157996cc4132p+0, -0x1.f57bdbc4b8000p-4},
+        {0x1.201201dd2fc9bp+0, -0x1.e370896404000p-4},
+        {0x1.1ecf4494d480bp+0, -0x1.d17983ef94000p-4},
+        {0x1.1d8f5528f6569p+0, -0x1.bf9674ed8a000p-4},
+        {0x1.1c52311577e7cp+0, -0x1.adc79202f6000p-4},
+        {0x1.1b17c74cb26e9p+0, -0x1.9c0c3e7288000p-4},
+        {0x1.19e010c2c1ab6p+0, -0x1.8a646b372c000p-4},
+        {0x1.18ab07bb670bdp+0, -0x1.78d01b3ac0000p-4},
+        {0x1.1778a25efbcb6p+0, -0x1.674f145380000p-4},
+        {0x1.1648d354c31dap+0, -0x1.55e0e6d878000p-4},
+        {0x1.151b990275fddp+0, -0x1.4485cdea1e000p-4},
+        {0x1.13f0ea432d24cp+0, -0x1.333d94d6aa000p-4},
+        {0x1.12c8b7210f9dap+0, -0x1.22079f8c56000p-4},
+        {0x1.11a3028ecb531p+0, -0x1.10e4698622000p-4},
+        {0x1.107fbda8434afp+0, -0x1.ffa6c6ad20000p-5},
+        {0x1.0f5ee0f4e6bb3p+0, -0x1.dda8d4a774000p-5},
+        {0x1.0e4065d2a9fcep+0, -0x1.bbcece4850000p-5},
+        {0x1.0d244632ca521p+0, -0x1.9a1894012c000p-5},
+        {0x1.0c0a77ce2981ap+0, -0x1.788583302c000p-5},
+        {0x1.0af2f83c636d1p+0, -0x1.5715e67d68000p-5},
+        {0x1.09ddb98a01339p+0, -0x1.35c8a49658000p-5},
+        {0x1.08cabaf52e7dfp+0, -0x1.149e364154000p-5},
+        {0x1.07b9f2f4e28fbp+0, -0x1.e72c082eb8000p-6},
+        {0x1.06ab58c358f19p+0, -0x1.a55f152528000p-6},
+        {0x1.059eea5ecf92cp+0, -0x1.63d62cf818000p-6},
+        {0x1.04949cdd12c90p+0, -0x1.228fb8caa0000p-6},
+        {0x1.038c6c6f0ada9p+0, -0x1.c317b20f90000p-7},
+        {0x1.02865137932a9p+0, -0x1.419355daa0000p-7},
+        {0x1.0182427ea7348p+0, -0x1.81203c2ec0000p-8},
+        {0x1.008040614b195p+0, -0x1.0040979240000p-9},
+        {0x1.fe01ff726fa1ap-1, 0x1.feff384900000p-9},
+        {0x1.fa11cc261ea74p-1, 0x1.7dc41353d0000p-7},
+        {0x1.f6310b081992ep-1, 0x1.3cea3c4c28000p-6},
+        {0x1.f25f63ceeadcdp-1, 0x1.b9fc114890000p-6},
+        {0x1.ee9c8039113e7p-1, 0x1.1b0d8ce110000p-5},
+        {0x1.eae8078cbb1abp-1, 0x1.58a5bd001c000p-5},
+        {0x1.e741aa29d0c9bp-1, 0x1.95c8340d88000p-5},
+        {0x1.e3a91830a99b5p-1, 0x1.d276aef578000p-5},
+        {0x1.e01e009609a56p-1, 0x1.07598e598c000p-4},
+        {0x1.dca01e577bb98p-1, 0x1.253f5e30d2000p-4},
+        {0x1.d92f20b7c9103p-1, 0x1.42edd8b380000p-4},
+        {0x1.d5cac66fb5ccep-1, 0x1.606598757c000p-4},
+        {0x1.d272caa5ede9dp-1, 0x1.7da76356a0000p-4},
+        {0x1.cf26e3e6b2ccdp-1, 0x1.9ab434e1c6000p-4},
+        {0x1.cbe6da2a77902p-1, 0x1.b78c7bb0d6000p-4},
+        {0x1.c8b266d37086dp-1, 0x1.d431332e72000p-4},
+        {0x1.c5894bd5d5804p-1, 0x1.f0a3171de6000p-4},
+        {0x1.c26b533bb9f8cp-1, 0x1.067152b914000p-3},
+        {0x1.bf583eeece73fp-1, 0x1.147858292b000p-3},
+        {0x1.bc4fd75db96c1p-1, 0x1.2266ecdca3000p-3},
+        {0x1.b951e0c864a28p-1, 0x1.303d7a6c55000p-3},
+        {0x1.b65e2c5ef3e2cp-1, 0x1.3dfc33c331000p-3},
+        {0x1.b374867c9888bp-1, 0x1.4ba366b7a8000p-3},
+        {0x1.b094b211d304ap-1, 0x1.5933928d1f000p-3},
+        {0x1.adbe885f2ef7ep-1, 0x1.66acd2418f000p-3},
+        {0x1.aaf1d31603da2p-1, 0x1.740f8ec669000p-3},
+        {0x1.a82e63fd358a7p-1, 0x1.815c0f51af000p-3},
+        {0x1.a5740ef09738bp-1, 0x1.8e92954f68000p-3},
+        {0x1.a2c2a90ab4b27p-1, 0x1.9bb3602f84000p-3},
+        {0x1.a01a01393f2d1p-1, 0x1.a8bed1c2c0000p-3},
+        {0x1.9d79f24db3c1bp-1, 0x1.b5b515c01d000p-3},
+        {0x1.9ae2505c7b190p-1, 0x1.c2967ccbcc000p-3},
+        {0x1.9852ef297ce2fp-1, 0x1.cf635d5486000p-3},
+        {0x1.95cbaeea44b75p-1, 0x1.dc1bd3446c000p-3},
+        {0x1.934c69de74838p-1, 0x1.e8c01b8cfe000p-3},
+        {0x1.90d4f2f6752e6p-1, 0x1.f5509c0179000p-3},
+        {0x1.8e6528effd79dp-1, 0x1.00e6c121fb800p-2},
+        {0x1.8bfce9fcc007cp-1, 0x1.071b80e93d000p-2},
+        {0x1.899c0dabec30ep-1, 0x1.0d46b9e867000p-2},
+        {0x1.87427aa2317fbp-1, 0x1.13687334bd000p-2},
+        {0x1.84f00acb39a08p-1, 0x1.1980d67234800p-2},
+        {0x1.82a49e8653e55p-1, 0x1.1f8ffe0cc8000p-2},
+        {0x1.8060195f40260p-1, 0x1.2595fd7636800p-2},
+        {0x1.7e22563e0a329p-1, 0x1.2b9300914a800p-2},
+        {0x1.7beb377dcb5adp-1, 0x1.3187210436000p-2},
+        {0x1.79baa679725c2p-1, 0x1.377266dec1800p-2},
+        {0x1.77907f2170657p-1, 0x1.3d54ffbaf3000p-2},
+        {0x1.756cadbd6130cp-1, 0x1.432eee32fe000p-2}
+    };
+    static const struct {
+        double chi, clo;
+    } T2[] = {
+        {0x1.61000014fb66bp-1, 0x1.e026c91425b3cp-56},
+        {0x1.63000034db495p-1, 0x1.dbfea48005d41p-55},
+        {0x1.650000d94d478p-1, 0x1.e7fa786d6a5b7p-55},
+        {0x1.67000074e6fadp-1, 0x1.1fcea6b54254cp-57},
+        {0x1.68ffffedf0faep-1, -0x1.c7e274c590efdp-56},
+        {0x1.6b0000763c5bcp-1, -0x1.ac16848dcda01p-55},
+        {0x1.6d0001e5cc1f6p-1, 0x1.33f1c9d499311p-55},
+        {0x1.6efffeb05f63ep-1, -0x1.e80041ae22d53p-56},
+        {0x1.710000e86978p-1, 0x1.bff6671097952p-56},
+        {0x1.72ffffc67e912p-1, 0x1.c00e226bd8724p-55},
+        {0x1.74fffdf81116ap-1, -0x1.e02916ef101d2p-57},
+        {0x1.770000f679c9p-1, -0x1.7fc71cd549c74p-57},
+        {0x1.78ffffa7ec835p-1, 0x1.1bec19ef50483p-55},
+        {0x1.7affffe20c2e6p-1, -0x1.07e1729cc6465p-56},
+        {0x1.7cfffed3fc9p-1, -0x1.08072087b8b1cp-55},
+        {0x1.7efffe9261a76p-1, 0x1.dc0286d9df9aep-55},
+        {0x1.81000049ca3e8p-1, 0x1.97fd251e54c33p-55},
+        {0x1.8300017932c8fp-1, -0x1.afee9b630f381p-55},
+        {0x1.850000633739cp-1, 0x1.9bfbf6b6535bcp-55},
+        {0x1.87000204289c6p-1, -0x1.bbf65f3117b75p-55},
+        {0x1.88fffebf57904p-1, -0x1.9006ea23dcb57p-55},
+        {0x1.8b00022bc04dfp-1, -0x1.d00df38e04b0ap-56},
+        {0x1.8cfffe50c1b8ap-1, -0x1.8007146ff9f05p-55},
+        {0x1.8effffc918e43p-1, 0x1.3817bd07a7038p-55},
+        {0x1.910001efa5fc7p-1, 0x1.93e9176dfb403p-55},
+        {0x1.9300013467bb9p-1, 0x1.f804e4b980276p-56},
+        {0x1.94fffe6ee076fp-1, -0x1.f7ef0d9ff622ep-55},
+        {0x1.96fffde3c12d1p-1, -0x1.082aa962638bap-56},
+        {0x1.98ffff4458a0dp-1, -0x1.7801b9164a8efp-55},
+        {0x1.9afffdd982e3ep-1, -0x1.740e08a5a9337p-55},
+        {0x1.9cfffed49fb66p-1, 0x1.fce08c19bep-60},
+        {0x1.9f00020f19c51p-1, -0x1.a3faa27885b0ap-55},
+        {0x1.a10001145b006p-1, 0x1.4ff489958da56p-56},
+        {0x1.a300007bbf6fap-1, 0x1.cbeab8a2b6d18p-55},
+        {0x1.a500010971d79p-1, 0x1.8fecadd78793p-55},
+        {0x1.a70001df52e48p-1, -0x1.f41763dd8abdbp-55},
+        {0x1.a90001c593352p-1, -0x1.ebf0284c27612p-55},
+        {0x1.ab0002a4f3e4bp-1, -0x1.9fd043cff3f5fp-57},
+        {0x1.acfffd7ae1ed1p-1, -0x1.23ee7129070b4p-55},
+        {0x1.aefffee510478p-1, 0x1.a063ee00edea3p-57},
+        {0x1.b0fffdb650d5bp-1, 0x1.a06c8381f0ab9p-58},
+        {0x1.b2ffffeaaca57p-1, -0x1.9011e74233c1dp-56},
+        {0x1.b4fffd995badcp-1, -0x1.9ff1068862a9fp-56},
+        {0x1.b7000249e659cp-1, 0x1.aff45d0864f3ep-55},
+        {0x1.b8ffff987164p-1, 0x1.cfe7796c2c3f9p-56},
+        {0x1.bafffd204cb4fp-1, -0x1.3ff27eef22bc4p-57},
+        {0x1.bcfffd2415c45p-1, -0x1.cffb7ee3bea21p-57},
+        {0x1.beffff86309dfp-1, -0x1.14103972e0b5cp-55},
+        {0x1.c0fffe1b57653p-1, 0x1.bc16494b76a19p-55},
+        {0x1.c2ffff1fa57e3p-1, -0x1.4feef8d30c6edp-57},
+        {0x1.c4fffdcbfe424p-1, -0x1.43f68bcec4775p-55},
+        {0x1.c6fffed54b9f7p-1, 0x1.47ea3f053e0ecp-55},
+        {0x1.c8fffeb998fd5p-1, 0x1.383068df992f1p-56},
+        {0x1.cb0002125219ap-1, -0x1.8fd8e64180e04p-57},
+        {0x1.ccfffdd94469cp-1, 0x1.e7ebe1cc7ea72p-55},
+        {0x1.cefffeafdc476p-1, 0x1.ebe39ad9f88fep-55},
+        {0x1.d1000169af82bp-1, 0x1.57d91a8b95a71p-56},
+        {0x1.d30000d0ff71dp-1, 0x1.9c1906970c7dap-55},
+        {0x1.d4fffea790fc4p-1, -0x1.80e37c558fe0cp-58},
+        {0x1.d70002edc87e5p-1, -0x1.f80d64dc10f44p-56},
+        {0x1.d900021dc82aap-1, -0x1.47c8f94fd5c5cp-56},
+        {0x1.dafffd86b0283p-1, 0x1.c7f1dc521617ep-55},
+        {0x1.dd000296c4739p-1, 0x1.8019eb2ffb153p-55},
+        {0x1.defffe54490f5p-1, 0x1.e00d2c652cc89p-57},
+        {0x1.e0fffcdabf694p-1, -0x1.f8340202d69d2p-56},
+        {0x1.e2fffdb52c8ddp-1, 0x1.b00c1ca1b0864p-56},
+        {0x1.e4ffff24216efp-1, 0x1.2ffa8b094ab51p-56},
+        {0x1.e6fffe88a5e11p-1, -0x1.7f673b1efbe59p-58},
+        {0x1.e9000119eff0dp-1, -0x1.4808d5e0bc801p-55},
+        {0x1.eafffdfa51744p-1, 0x1.80006d54320b5p-56},
+        {0x1.ed0001a127fa1p-1, -0x1.002f860565c92p-58},
+        {0x1.ef00007babcc4p-1, -0x1.540445d35e611p-55},
+        {0x1.f0ffff57a8d02p-1, -0x1.ffb3139ef9105p-59},
+        {0x1.f30001ee58ac7p-1, 0x1.a81acf2731155p-55},
+        {0x1.f4ffff5823494p-1, 0x1.a3f41d4d7c743p-55},
+        {0x1.f6ffffca94c6bp-1, -0x1.202f41c987875p-57},
+        {0x1.f8fffe1f9c441p-1, 0x1.77dd1f477e74bp-56},
+        {0x1.fafffd2e0e37ep-1, -0x1.f01199a7ca331p-57},
+        {0x1.fd0001c77e49ep-1, 0x1.181ee4bceacb1p-56},
+        {0x1.feffff7e0c331p-1, -0x1.e05370170875ap-57},
+        {0x1.00ffff465606ep+0, -0x1.a7ead491c0adap-55},
+        {0x1.02ffff3867a58p+0, -0x1.77f69c3fcb2ep-54},
+        {0x1.04ffffdfc0d17p+0, 0x1.7bffe34cb945bp-54},
+        {0x1.0700003cd4d82p+0, 0x1.20083c0e456cbp-55},
+        {0x1.08ffff9f2cbe8p+0, -0x1.dffdfbe37751ap-57},
+        {0x1.0b000010cda65p+0, -0x1.13f7faee626ebp-54},
+        {0x1.0d00001a4d338p+0, 0x1.07dfa79489ff7p-55},
+        {0x1.0effffadafdfdp+0, -0x1.7040570d66bcp-56},
+        {0x1.110000bbafd96p+0, 0x1.e80d4846d0b62p-55},
+        {0x1.12ffffae5f45dp+0, 0x1.dbffa64fd36efp-54},
+        {0x1.150000dd59ad9p+0, 0x1.a0077701250aep-54},
+        {0x1.170000f21559ap+0, 0x1.dfdf9e2e3deeep-55},
+        {0x1.18ffffc275426p+0, 0x1.10030dc3b7273p-54},
+        {0x1.1b000123d3c59p+0, 0x1.97f7980030188p-54},
+        {0x1.1cffff8299eb7p+0, -0x1.5f932ab9f8c67p-57},
+        {0x1.1effff48ad4p+0, 0x1.37fbf9da75bebp-54},
+        {0x1.210000c8b86a4p+0, 0x1.f806b91fd5b22p-54},
+        {0x1.2300003854303p+0, 0x1.3ffc2eb9fbf33p-54},
+        {0x1.24fffffbcf684p+0, 0x1.601e77e2e2e72p-56},
+        {0x1.26ffff52921d9p+0, 0x1.ffcbb767f0c61p-56},
+        {0x1.2900014933a3cp+0, -0x1.202ca3c02412bp-56},
+        {0x1.2b00014556313p+0, -0x1.2808233f21f02p-54},
+        {0x1.2cfffebfe523bp+0, -0x1.8ff7e384fdcf2p-55},
+        {0x1.2f0000bb8ad96p+0, -0x1.5ff51503041c5p-55},
+        {0x1.30ffffb7ae2afp+0, -0x1.10071885e289dp-55},
+        {0x1.32ffffeac5f7fp+0, -0x1.1ff5d3fb7b715p-54},
+        {0x1.350000ca66756p+0, 0x1.57f82228b82bdp-54},
+        {0x1.3700011fbf721p+0, 0x1.000bac40dd5ccp-55},
+        {0x1.38ffff9592fb9p+0, -0x1.43f9d2db2a751p-54},
+        {0x1.3b00004ddd242p+0, 0x1.57f6b707638e1p-55},
+        {0x1.3cffff5b2c957p+0, 0x1.a023a10bf1231p-56},
+        {0x1.3efffeab0b418p+0, 0x1.87f6d66b152bp-54},
+        {0x1.410001532aff4p+0, 0x1.7f8375f198524p-57},
+        {0x1.4300017478b29p+0, 0x1.301e672dc5143p-55},
+        {0x1.44fffe795b463p+0, 0x1.9ff69b8b2895ap-55},
+        {0x1.46fffe80475ep+0, -0x1.5c0b19bc2f254p-54},
+        {0x1.48fffef6fc1e7p+0, 0x1.b4009f23a2a72p-54},
+        {0x1.4afffe5bea704p+0, -0x1.4ffb7bf0d7d45p-54},
+        {0x1.4d000171027dep+0, -0x1.9c06471dc6a3dp-54},
+        {0x1.4f0000ff03ee2p+0, 0x1.77f890b85531cp-54},
+        {0x1.5100012dc4bd1p+0, 0x1.004657166a436p-57},
+        {0x1.530001605277ap+0, -0x1.6bfcece233209p-54},
+        {0x1.54fffecdb704cp+0, -0x1.902720505a1d7p-55},
+        {0x1.56fffef5f54a9p+0, 0x1.bbfe60ec96412p-54},
+        {0x1.5900017e61012p+0, 0x1.87ec581afef9p-55},
+        {0x1.5b00003c93e92p+0, -0x1.f41080abf0ccp-54},
+        {0x1.5d0001d4919bcp+0, -0x1.8812afb254729p-54},
+        {0x1.5efffe7b87a89p+0, -0x1.47eb780ed6904p-54}
+    };
+
+    double w, z, r, r2, r3, y, invc, logc, kd, hi, lo;
+    UINT64 ix, iz, tmp;
+    UINT32 top;
+    int k, i;
+
+    ix = *(UINT64*)&x;
+    top = ix >> 48;
+    if (ix - 0x3fee000000000000ULL < 0x3090000000000ULL) {
+        double rhi, rlo;
+
+        /* Handle close to 1.0 inputs separately. */
+        /* Fix sign of zero with downward rounding when x==1. */
+        if (ix == 0x3ff0000000000000ULL)
+            return 0;
+        r = x - 1.0;
+        r2 = r * r;
+        r3 = r * r2;
+        y = r3 * (B[1] + r * B[2] + r2 * B[3] + r3 * (B[4] + r * B[5] + r2 * B[6] +
+                    r3 * (B[7] + r * B[8] + r2 * B[9] + r3 * B[10])));
+        /* Worst-case error is around 0.507 ULP. */
+        w = r * 0x1p27;
+        rhi = r + w - w;
+        rlo = r - rhi;
+        w = rhi * rhi * B[0]; /* B[0] == -0.5. */
+        hi = r + w;
+        lo = r - hi + w;
+        lo += B[0] * rlo * (rhi + r);
+        y += lo;
+        y += hi;
+        return y;
+    }
+    if (top - 0x0010 >= 0x7ff0 - 0x0010) {
+        /* x < 0x1p-1022 or inf or nan. */
+        if (ix * 2 == 0)
+            return math_error(_SING, "log", x, 0, -1.0 / x);
+        if (ix == 0x7ff0000000000000ULL) /* log(inf) == inf. */
+            return x;
+        if ((top & 0x7ff0) == 0x7ff0 && (ix & 0xfffffffffffffULL))
+            return x;
+        if (top & 0x8000)
+            return math_error(_DOMAIN, "log", x, 0, (x - x) / (x - x));
+        /* x is subnormal, normalize it. */
+        x *= 0x1p52;
+        ix = *(UINT64*)&x;
+        ix -= 52ULL << 52;
+    }
+
+    /* x = 2^k z; where z is in range [OFF,2*OFF) and exact.
+       The range is split into N subintervals.
+       The ith subinterval contains z and c is near its center. */
+    tmp = ix - 0x3fe6000000000000ULL;
+    i = (tmp >> (52 - 7)) % (1 << 7);
+    k = (INT64)tmp >> 52; /* arithmetic shift */
+    iz = ix - (tmp & 0xfffULL << 52);
+    invc = T[i].invc;
+    logc = T[i].logc;
+    z = *(double*)&iz;
+
+    /* log(x) = log1p(z/c-1) + log(c) + k*Ln2. */
+    /* r ~= z/c - 1, |r| < 1/(2*N). */
+    r = (z - T2[i].chi - T2[i].clo) * invc;
+    kd = (double)k;
+
+    /* hi + lo = r + log(c) + k*Ln2. */
+    w = kd * Ln2hi + logc;
+    hi = w + r;
+    lo = w - hi + r + kd * Ln2lo;
+
+    /* log(x) = lo + (log1p(r) - r) + hi. */
+    r2 = r * r; /* rounding error: 0x1p-54/N^2. */
+    /* Worst case error if |y| > 0x1p-5:
+       0.5 + 4.13/N + abs-poly-error*2^57 ULP (+ 0.002 ULP without fma)
+       Worst case error if |y| > 0x1p-4:
+       0.5 + 2.06/N + abs-poly-error*2^56 ULP (+ 0.001 ULP without fma). */
+    y = lo + r2 * A[0] +
+        r * r2 * (A[1] + r * A[2] + r2 * (A[3] + r * A[4])) + hi;
+    return y;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index c52491d3b65..8589601ef6a 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -120,14 +120,6 @@ static float CDECL unix_lgammaf(float x)
 #endif
 }
 
-/*********************************************************************
- *      log
- */
-static double CDECL unix_log( double x )
-{
-    return log( x );
-}
-
 /*********************************************************************
  *      logf
  */
@@ -251,7 +243,6 @@ static const struct unix_funcs funcs =
     unix_fmaf,
     unix_lgamma,
     unix_lgammaf,
-    unix_log,
     unix_logf,
     unix_log10,
     unix_log10f,
diff --git a/dlls/msvcrt/unixlib.h b/dlls/msvcrt/unixlib.h
index 8e229ab7014..db840b9d177 100644
--- a/dlls/msvcrt/unixlib.h
+++ b/dlls/msvcrt/unixlib.h
@@ -30,7 +30,6 @@ struct unix_funcs
     float           (CDECL *fmaf)(float x, float y, float z);
     double          (CDECL *lgamma)(double x);
     float           (CDECL *lgammaf)(float x);
-    double          (CDECL *log)(double x);
     float           (CDECL *logf)(float x);
     double          (CDECL *log10)(double x);
     float           (CDECL *log10f)(float x);
-- 
2.31.1

